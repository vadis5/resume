<?php

namespace Tests\Functional\API\V1;

use App\Models\BrandPrimaryColour;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

/**
 * BrandColoursControllerTest for Tests of Brand Primary Colours
 *
 * PHP version 7.4
 *
 * @category Seeder
 * @package  Tests\Functional\API\v1
 * @author   Pasholka Artem <artem.pasholka@intellicagroup.com>
 * @license  BSD License
 * @link     Tests\Functional\API\v1
 */
class BrandColoursControllerTest extends TestCase
{
    use DatabaseMigrations;

    private const TABLE_NAME_BRAND_PRIMARY_COLOURS = 'brand_primary_colours';
    private const SUPER_ADMIN = ['super-admin@admin.com', 'Super Admin'];
    private const HELIX_ADMIN = ['helix-admin@admin.com', 'Helix Admin'];
    private const TENANT_ADMIN_1 = ['tenant-admin-1@admin.com', 'Tenant Admin 1'];
    private const TENANT_ADMIN_2 = ['tenant-admin-2@admin.com', 'Tenant Admin 2'];
    private const TENANT_USER_1 = ['tenant-user-1@admin.com', 'Tenant User 1'];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsBrandPrimaryColoursSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder(): void
    {
        $brandPrimaryColours = DB::table(self::TABLE_NAME_BRAND_PRIMARY_COLOURS)->get();

        $this->assertEquals(3, $brandPrimaryColours->count());

        $brandPrimaryColour = DB::table(self::TABLE_NAME_BRAND_PRIMARY_COLOURS)->first();

        $this->assertEquals(1, $brandPrimaryColour->tenant_id);
        $this->assertEquals(10, $brandPrimaryColour->red);
        $this->assertEquals(232, $brandPrimaryColour->green);
        $this->assertEquals(201, $brandPrimaryColour->blue);
        $this->assertEquals(true, $brandPrimaryColour->active);
    }

    /**
     * Full index for super-admin.
     *
     * @return void
     */
    public function testIndexForSuperAdmin(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/v1/brandColours?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "tenant_id",
                            "red",
                            "green",
                            "blue",
                            "active",
                            "updated_at",
                            "created_at",
                            "id",
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(3, $data);
        $this->assertEquals('Brand Primary Colour Index.', $message);
    }

    /**
     * Full index for tenant-admin. Forbidden
     *
     * @return void
     */
    public function testIndexForTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/v1/brandColours?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Empty index for super-admin.
     *
     * @return void
     */
    public function testIndexEmptyForSuperAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        DB::table(self::TABLE_NAME_BRAND_PRIMARY_COLOURS)->delete();

        // Request
        $response = $this->get('api/v1/brandColours?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/v1/brandColours');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Brand Primary Colour via Super Admin
     *
     * @return void
     */
    public function testStoreNewBPCViaSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);
        DB::table('brand_primary_colours')->where('tenant_id', 1)->delete();
        // Create data
        $data = [
            "tenant_id" => 1,
            "red" => 34,
            "green" => 12,
            "blue" => 34
        ];

        // Request
        $response = $this->post('api/v1/brandColours?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals(34, $data['red']);
        $this->assertEquals(12, $data['green']);
        $this->assertEquals(34, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Created new Brand Primary Colour.", $message);
    }

    /**
     * Check Store a new Brand Primary Colour via Tenant Admin
     *
     * @return void
     */
    public function testStoreNewBPCViaTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);
        DB::table('brand_primary_colours')->where('tenant_id', 2)->delete();
        // Create data
        $data = [
            "tenant_id" => 2,
            "red" => 34,
            "green" => 12,
            "blue" => 34
        ];

        // Request
        $response = $this->post('api/v1/brandColours?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(2, $data['tenant_id']);
        $this->assertEquals(34, $data['red']);
        $this->assertEquals(12, $data['green']);
        $this->assertEquals(34, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Created new Brand Primary Colour.", $message);
    }

    /**
     * Check Store A Wrong Data By Tenant Admin
     *
     * @return void
     */
    public function testStoreWrongDataByTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Create data
        $data = [
            "tenant_id" => 2,
            "red" => [],
            "green" => 'fgdf',
            "blue" => 'fsdf'
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/brandColours?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(4, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store New Brand Primary Colour by Authenticated User Without Permissions
     *
     * @return void
     */
    public function testStoreNewBPCByAuthenticatedUserWithoutPermissions(): void
    {
        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Create data
        $data = [
            "tenant_id" => 2,
            "red" => 34,
            "green" => 12,
            "blue" => 34
        ];

        // Request
        $response = $this->post('api/v1/brandColours?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Store New New Brand Primary Colour by Guest
     *
     * @return void
     */
    public function testStoreNewBPCByGuest(): void
    {
        // Create data
        $data = [
            "tenant_id" => 2,
            "red" => 34,
            "green" => 12,
            "blue" => 34
        ];

        // Request
        $response = $this->post('api/v1/brandColours?token=', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Brand Primary Colour By Tenant Admin
     *
     * @return void
     */
    public function testUpdateBPCByTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Create data
        $data = [
            "red" => 26,
            "green" => 58,
            "blue" => 44
        ];

        // Request
        $response = $this->put('api/v1/brandColours/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(2, $data['tenant_id']);
        $this->assertEquals(26, $data['red']);
        $this->assertEquals(58, $data['green']);
        $this->assertEquals(44, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Updated The Brand Primary Colour.", $message);
    }

    /**
     * Check Update Brand Primary Colour By Super Admin
     *
     * @return void
     */
    public function testUpdateBPCBySuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Create data
        $data = [
            "red" => 26,
            "green" => 58,
            "blue" => 44
        ];

        // Request
        $response = $this->put('api/v1/brandColours/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals(26, $data['red']);
        $this->assertEquals(58, $data['green']);
        $this->assertEquals(44, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Updated The Brand Primary Colour.", $message);
    }

    /**
     * Check Update Brand Primary Colour With Wrong ID For The Super Admin.
     *
     * @return void
     */
    public function testUpdateBPCWithWrongIdForTheSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Create data
        $data = [
            "red" => 26,
            "green" => 58,
            "blue" => 44
        ];

        // Request
        $response = $this->put('api/v1/brandColours/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Brand Primary Colour With Wrong Data For The Tenant Admin.
     *
     * @return void
     */
    public function testUpdateWrongDataForTheTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Create data
        $data = [
            "red" => [],
            "green" => 'test',
            "blue" => 'cvv'
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/brandColours/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(3, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }


    /**
     * Check Update Brand Primary Colour By Authenticated User Without Required Role Tenant User
     *
     * @return void
     */
    public function testUpdateBPCByAuthenticatedUserWithoutRequiredRoleTenantUser(): void
    {
        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Create data
        $data = [
            "red" => 26,
            "green" => 58,
            "blue" => 44
        ];

        // Request
        $response = $this->put('api/v1/brandColours/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Update Brand Primary Colour By Authenticated User Without Required Role Tenant Admin 2
     *
     * @return void
     */
    public function testUpdateBPCByAuthenticatedUserWithoutRequiredRoleTenantAdmin2(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Create data
        $data = [
            "red" => 26,
            "green" => 58,
            "blue" => 44
        ];

        // Request
        $response = $this->put('api/v1/brandColours/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Update Brand Primary Colour For Guest
     *
     * @return void
     */
    public function testUpdateBPCForGuest(): void
    {
        // Create data
        $data = [
            "name" => "Dep-123",
            "short_name" => "d-123",
        ];

        // Request
        $response = $this->put('api/v1/brandColours/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Brand Primary Colour For Super Admin
     *
     * @return void
     */
    public function testDeleteBPCForSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->delete('api/v1/brandColours/2?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Brand Primary Colour.", $message);

        $removedBPC = BrandPrimaryColour::where('id', 2)->first();
        $this->assertEquals(null, $removedBPC);
    }

    /**
     * Check Delete Brand Primary Colour For Tenant Admin
     *
     * @return void
     */
    public function testDeleteBPCForTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->delete('api/v1/brandColours/2?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Brand Primary Colour.", $message);

        $removedBPC = BrandPrimaryColour::where('id', 2)->first();
        $this->assertEquals(null, $removedBPC);
    }

    /**
     *  Alien Tenant Admin tries to delete Brand Primary Colour
     *
     * @return void
     */
    public function testDeleteAlienTenantAdminTriesToDeleteBPC(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->delete('api/v1/brandColours/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Delete Brand Primary Colour With Wrong ID For Super Admin
     *
     * @return void
     */
    public function testDeleteBPCWithWrongIdForSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->delete('api/v1/brandColours/555555?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Brand Primary Colour By Guest
     *
     * @return void
     */
    public function testDeleteBPCByGuest(): void
    {
        // Request
        $response = $this->delete('api/v1/brandColours/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Brand Primary Colour for Super Admin
     *
     * @return void
     */
    public function testShowSpecificBPCForSuperAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/v1/brandColours/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(3, $data['id']);
        $this->assertEquals(3, $data['tenant_id']);
        $this->assertEquals(14, $data['red']);
        $this->assertEquals(48, $data['green']);
        $this->assertEquals(25, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Got Specific Brand Primary Colour.", $message);
    }

    /**
     * Check Specific Brand Primary Colour for Tenant Admin
     *
     * @return void
     */
    public function testShowSpecificBPCForTenantAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->get('api/v1/brandColours/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(3, $data['id']);
        $this->assertEquals(3, $data['tenant_id']);
        $this->assertEquals(14, $data['red']);
        $this->assertEquals(48, $data['green']);
        $this->assertEquals(25, $data['blue']);
        $this->assertEquals(true, $data['active']);
        $this->assertEquals("Got Specific Brand Primary Colour.", $message);
    }

    /**
     * Check Specific Brand Primary Colour by alien Tenant Admin
     *
     * @return void
     */
    public function testShowBPCByAlienTenantAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->get('api/v1/brandColours/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Get Brand Primary Colour for Guest
     *
     * @return void
     */
    public function testShowSpecificBPCForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/brandColours/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Brand Primary Colour With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificBPCWithWrongIdForSuperAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/v1/brandColours/1111111?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check activate method by super admin
     *
     * @return void
     */
    public function testActivateBySuperAdmin(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->put('api/v1/brandColours/activate/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "tenant_id",
                        "red",
                        "green",
                        "blue",
                        "active",
                        "updated_at",
                        "created_at",
                        "id",
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals(3, $data['id']);
        $this->assertEquals(3, $data['tenant_id']);
        $this->assertEquals(14, $data['red']);
        $this->assertEquals(48, $data['green']);
        $this->assertEquals(25, $data['blue']);
        $this->assertEquals(false, $data['active']);
        $this->assertEquals('Status "active" was changed.', $message);
    }

    /**
     * Check activate method by super admin With Wrong ID
     *
     * @return void
     */
    public function testActivateBySuperAdminWithWrongId(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->put('api/v1/brandColours/activate/1111111?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check activate method by Tenant Admin
     *
     * @return void
     */
    public function testActivateByTenantAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->put('api/v1/brandColours/activate/3?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check activate method for guest
     *
     * @return void
     */
    public function testActivateForGuest(): void
    {
        // Request
        $response = $this->put('api/v1/brandColours/activate/1');

        // Check response status
        $response->assertStatus(401);
    }
}
