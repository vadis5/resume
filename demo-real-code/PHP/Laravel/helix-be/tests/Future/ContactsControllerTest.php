<?php

namespace Tests\Functional\API\V1;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\Traits\ApiResponse;

class ContactsControllerTest extends TestCase
{
    use DatabaseMigrations, ApiResponse;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestContactSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder(): void
    {
        $contactsCount = count(Config::get('tests.contacts'));
        $contacts = DB::table('contacts')->get();
        $this->assertEquals($contactsCount, $contacts->count());

        $firstContact = DB::table('contacts')->where('id', 1)->first();
        $this->assertEquals('Linda', $firstContact->first_name);
        $this->assertEquals('port@example.com', $firstContact->email);
        $this->assertEquals(12, $firstContact->department_id);
    }

    /**
     * Check Index Super Admin
     *
     * @return void
     */
    public function testIndexForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/contacts?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "first_name",
                            "last_name",
                            "email",
                            "email_verified",
                            "phone",
                            "location",
                            "job_title",
                            "department_id",
                            "communication_type",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(6, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('Linda', $data[0]['first_name']);
        $this->assertEquals('Port', $data[0]['last_name']);
        $this->assertEquals('port@example.com', $data[0]['email']);
        $this->assertEquals(true, $data[0]['email_verified']);
        $this->assertEquals('4458956587', $data[0]['phone']);
        $this->assertEquals('United Kingdom', $data[0]['location']);
        $this->assertEquals('supervisor', $data[0]['job_title']);
        $this->assertEquals(12, $data[0]['department_id']);
        $this->assertEquals('account', $data[0]['communication_type']);
        $this->assertEquals("Contact Index", $message);
    }

    /** Check Index for Not Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/contacts?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/contacts');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check IndexById Super Admin
     *
     * @return void
     */
    public function testIndexByIdForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/contacts/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "first_name",
                            "last_name",
                            "email",
                            "email_verified",
                            "phone",
                            "location",
                            "job_title",
                            "department_id",
                            "communication_type",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('Linda', $data[0]['first_name']);
        $this->assertEquals('Port', $data[0]['last_name']);
        $this->assertEquals('port@example.com', $data[0]['email']);
        $this->assertEquals(true, $data[0]['email_verified']);
        $this->assertEquals('4458956587', $data[0]['phone']);
        $this->assertEquals('United Kingdom', $data[0]['location']);
        $this->assertEquals('supervisor', $data[0]['job_title']);
        $this->assertEquals(12, $data[0]['department_id']);
        $this->assertEquals('account', $data[0]['communication_type']);
        $this->assertEquals("Contact Index", $message);
    }

    /**
     * Check IndexById for Company Manager
     *
     * @return void
     */
    public function testIndexByIdForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response = $this->get('api/v1/contacts/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "first_name",
                            "last_name",
                            "email",
                            "email_verified",
                            "phone",
                            "location",
                            "job_title",
                            "department_id",
                            "communication_type",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('Linda', $data[0]['first_name']);
        $this->assertEquals('Port', $data[0]['last_name']);
        $this->assertEquals('port@example.com', $data[0]['email']);
        $this->assertEquals(true, $data[0]['email_verified']);
        $this->assertEquals('4458956587', $data[0]['phone']);
        $this->assertEquals('United Kingdom', $data[0]['location']);
        $this->assertEquals('supervisor', $data[0]['job_title']);
        $this->assertEquals(12, $data[0]['department_id']);
        $this->assertEquals('account', $data[0]['communication_type']);
        $this->assertEquals("Contact Index", $message);
    }

    /** Check IndexById for Not Admin
     *
     * @return void
     */
    public function testIndexByIdForNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/contacts/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check IndexById for Guest
     *
     * @return void
     */
    public function testIndexByIdForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/contacts/company/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new contact for Company Manager
     *
     * @return void
     */
    public function testStoreNewContactForCompanyManger(): void
    {
        $token = $this->loginRole('company-manager');

        // Create data
        $data = [
            "company_id" => 1,
            "first_name" => "Linda",
            "last_name" => "Port",
            "email" => "past@example.com",
            "email_verified" => 1,
            "phone" => "4458956587",
            "location" => "United Kingdom",
            "job_title" => "chief",
            "department_id" => 44,
            "communication_type" => "account"
        ];

        $response = $this->post('api/v1/contacts?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "first_name",
                        "last_name",
                        "email",
                        "email_verified",
                        "phone",
                        "location",
                        "job_title",
                        "department_id",
                        "communication_type",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(12, $data);
        $this->assertEquals('Linda', $data['first_name']);
        $this->assertEquals('Port', $data['last_name']);
        $this->assertEquals('past@example.com', $data['email']);
        $this->assertEquals(true, $data['email_verified']);
        $this->assertEquals('4458956587', $data['phone']);
        $this->assertEquals('United Kingdom', $data['location']);
        $this->assertEquals('chief', $data['job_title']);
        $this->assertEquals(44, $data['department_id']);
        $this->assertEquals('account', $data['communication_type']);
        $this->assertEquals("Created new Contact", $message);

        $contactCompany = DB::table('company_contacts')
            ->where('company_id', 1)
            ->where('contact_id', $data['id'])
            ->first();

        $this->assertTrue($contactCompany !== null, 'Record was not saved to company_contact table');
    }

    /**
     * Check Store New Contact By Authenticated User not Admin
     *
     * @return void
     */
    public function testStoreNewContactByAuthenticatedUserNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            "company_id" => 1,
            "first_name" => "Linda",
            "last_name" => "Port",
            "email" => "past@example.com",
            "email_verified" => 1,
            "phone" => "4458956587",
            "location" => "United Kingdom",
            "job_title" => "chief",
            "department_id" => 44,
            "communication_type" => "account"
        ];

        $response = $this->post('api/v1/contacts?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Store A Wrong Data For Admin
     *
     * @return void
     */
    public function testStoreAWrongDataForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "company_id" => [],
            "first_name" => 1561561,
            "last_name" => 255,
            "email" => [],
            "email_verified" => [],
            "phone" => 561,
            "location" => 56,
            "job_title" => [],
            "department_id" => "cv",
            "communication_type" => 8565
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/contacts?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(10, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store For Not Authenticated User
     *
     * @return void
     */
    public function testStoreForNotAuthenticatedUser(): void
    {
        // Create data
        $data = [
            "company_id" => 1,
            "first_name" => "Linda",
            "last_name" => "Port",
            "email" => "past@example.com",
            "email_verified" => 1,
            "phone" => "4458956587",
            "location" => "United Kingdom",
            "job_title" => "chief",
            "department_id" => 44,
            "communication_type" => "account"
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/contacts?token=', $data);

        // Check response status
        $response->assertStatus(401);

        $responseJSON = json_decode($response->getContent(), true);

        $this->assertEquals("Unauthorized", $response['error']);
    }

    /**
     * Check Store Contact With Wrong Company ID for admin group
     *
     * @return void
     */
    public function testCheckStoreContactWithWrongCompanyIdForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'company_id' => 99999,
            "first_name" => "Linda",
            "last_name" => "Port",
            "email" => "past@example.com",
            "email_verified" => 1,
            "phone" => "4458956587",
            "location" => "United Kingdom",
            "job_title" => "chief",
            "department_id" => 44,
            "communication_type" => "account"
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/contacts?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Specific Contact for Company Manager
     *
     * @return void
     */
    public function testShowSpecificContactForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response =
            $this->get('api/v1/contacts/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "first_name",
                        "last_name",
                        "email",
                        "email_verified",
                        "phone",
                        "location",
                        "job_title",
                        "department_id",
                        "communication_type",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(12, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('Linda', $data['first_name']);
        $this->assertEquals('Port', $data['last_name']);
        $this->assertEquals('port@example.com', $data['email']);
        $this->assertEquals(true, $data['email_verified']);
        $this->assertEquals('4458956587', $data['phone']);
        $this->assertEquals('United Kingdom', $data['location']);
        $this->assertEquals('supervisor', $data['job_title']);
        $this->assertEquals(12, $data['department_id']);
        $this->assertEquals('account', $data['communication_type']);
        $this->assertEquals("Got Specific Contact", $message);
    }

    /**
     * Check Specific Contact By Company Manager From another company
     *
     * @return void
     */
    public function testShowSpecificContactByManagerFromAnotherCompany(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response = $this->get('api/v1/contacts/6?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Get Contact for Guest
     *
     * @return void
     */
    public function testShowSpecificContactForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/contacts/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Contact With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificContactWithWrongIdForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->get('api/v1/contacts/99999996?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Contact For Company Manager
     *
     * @return void
     */
    public function testUpdateContactForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Create data
        $data = [
            'first_name' => 'TestName',
        ];

        $response = $this->put('api/v1/contacts/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "first_name",
                        "last_name",
                        "email",
                        "email_verified",
                        "phone",
                        "location",
                        "job_title",
                        "department_id",
                        "communication_type",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(12, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('TestName', $data['first_name']);
        $this->assertEquals('Port', $data['last_name']);
        $this->assertEquals('port@example.com', $data['email']);
        $this->assertEquals(true, $data['email_verified']);
        $this->assertEquals('4458956587', $data['phone']);
        $this->assertEquals('United Kingdom', $data['location']);
        $this->assertEquals('supervisor', $data['job_title']);
        $this->assertEquals(12, $data['department_id']);
        $this->assertEquals('account', $data['communication_type']);
        $this->assertEquals("Updated The Contact.", $message);
    }

    /**
     * Check Update Contact For Super Admin
     *
     * @return void
     */
    public function testUpdateContactForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'first_name' => 'Test',
        ];

        $response = $this->put('api/v1/contacts/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "first_name",
                        "last_name",
                        "email",
                        "email_verified",
                        "phone",
                        "location",
                        "job_title",
                        "department_id",
                        "communication_type",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(12, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('Test', $data['first_name']);
        $this->assertEquals('Port', $data['last_name']);
        $this->assertEquals('port@example.com', $data['email']);
        $this->assertEquals(true, $data['email_verified']);
        $this->assertEquals('4458956587', $data['phone']);
        $this->assertEquals('United Kingdom', $data['location']);
        $this->assertEquals('supervisor', $data['job_title']);
        $this->assertEquals(12, $data['department_id']);
        $this->assertEquals('account', $data['communication_type']);
        $this->assertEquals("Updated The Contact.", $message);
    }

    /**
     * Check Update Contact By Other Authenticated User not Admin
     *
     * @return void
     */
    public function testUpdateContactByOtherAuthenticatedUserNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            "last_name" => 'test'
        ];

        $response = $this->put('api/v1/contacts/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Update Contact For Guest
     *
     * @return void
     */
    public function testUpdateContactForGuest(): void
    {
        // Request
        // Create data
        $data = [
            "phone" => "561651651",
        ];

        $response = $this->put('api/v1/contacts/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Contact For Wrong Contact ID For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongContactIdForTheAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        // Create data
        $data = [
            "phone" => "41651561551"
        ];

        $response = $this->put('api/v1/contacts/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Contact With Wrong Data For The Admin.
     *
     * @return void
     */
    public function testUpdateContactWithWrongDataForTheAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        // Create data
        $data = [
            "first_name" => 1561561,
            "last_name" => 255,
            "email" => [],
            "email_verified" => [],
            "phone" => 561,
            "location" => 56,
            "job_title" => [],
            "department_id" => "cv",
            "communication_type" => 8565
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/contacts/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(9, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Delete Contact For Super Admin
     *
     * @return void
     */
    public function testDeleteContactForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->delete('api/v1/contacts/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Contact.", $message);

        $contacts = DB::table('contacts')->where('id', 3)->first();
        $this->assertEquals(null, $contacts);
    }

    /**
     * Not admin user tries to delete contact
     *
     * @return void
     */
    public function testDeleteNotAdminUserTriesToDeleteContact(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->delete('api/v1/contacts/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Delete Contact With Wrong ID For Admin
     *
     * @return void
     */
    public function testDeleteContactWithWrongIDForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->delete('api/v1/contacts/555555?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Contact By Guest
     *
     * @return void
     */
    public function testDeleteContactByGuest(): void
    {
        // Request
        $response = $this->delete('api/v1/contacts/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Empty Index for CompanyManager
     *
     * @return void
     */
    public function testIndexEmptyForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');
        DB::table('contacts')->delete();

        // Request
        $response = $this->get('api/v1/contacts/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Empty Index Id for Super Admin
     *
     * @return void
     */
    public function testIndexByCompanyIdEmptyForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');
        DB::table('contacts')->delete();
        // Request
        $response = $this->get('api/v1/contacts?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }
}
