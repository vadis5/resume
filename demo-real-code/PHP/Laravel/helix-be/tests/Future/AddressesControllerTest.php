<?php

namespace Tests\Functional\API\V1;

use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;
use App\Traits\ApiResponse;

class AddressesControllerTest extends TestCase
{
    use DatabaseMigrations, ApiResponse;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestAddressSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder(): void
    {
        $addressesCount = count(Config::get('tests.addresses'));
        $addresses = DB::table('addresses')->get();
        $this->assertEquals($addressesCount, $addresses->count());

        $firstAddress = DB::table('addresses')->where('id', 1)->first();
        $this->assertEquals('1 York Road', $firstAddress->address_line_1);
        $this->assertEquals('LONDON', $firstAddress->city);
        $this->assertEquals(true, $firstAddress->primary);
    }

    /**
     * Check Index Super Admin
     *
     * @return void
     */
    public function testIndexForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/addresses?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "address_line_1",
                            "address_line_2",
                            "city",
                            "country",
                            "postcode",
                            "primary",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(6, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('1 York Road', $data[0]['address_line_1']);
        $this->assertEquals('9623 Church Lane', $data[0]['address_line_2']);
        $this->assertEquals('LONDON', $data[0]['city']);
        $this->assertEquals('United kingdom', $data[0]['country']);
        $this->assertEquals('NW17 2LG', $data[0]['postcode']);
        $this->assertEquals(true, $data[0]['primary']);
        $this->assertEquals("Address Index", $message);
    }

    /** Check Index for Not Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/addresses?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/addresses');

        // Check response status
        $response->assertStatus(401);
    }


    /**
     * Check IndexById Super Admin
     *
     * @return void
     */
    public function testIndexByIdForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/addresses/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "address_line_1",
                            "address_line_2",
                            "city",
                            "country",
                            "postcode",
                            "primary",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('1 York Road', $data[0]['address_line_1']);
        $this->assertEquals('9623 Church Lane', $data[0]['address_line_2']);
        $this->assertEquals('LONDON', $data[0]['city']);
        $this->assertEquals('United kingdom', $data[0]['country']);
        $this->assertEquals('NW17 2LG', $data[0]['postcode']);
        $this->assertEquals(true, $data[0]['primary']);
        $this->assertEquals("Address Index", $message);
    }

    /**
     * Check IndexById for Company Manager
     *
     * @return void
     */
    public function testIndexByIdForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response = $this->get('api/v1/addresses/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            "id",
                            "address_line_1",
                            "address_line_2",
                            "city",
                            "country",
                            "postcode",
                            "primary",
                            "created_at",
                            "updated_at"
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('1 York Road', $data[0]['address_line_1']);
        $this->assertEquals('9623 Church Lane', $data[0]['address_line_2']);
        $this->assertEquals('LONDON', $data[0]['city']);
        $this->assertEquals('United kingdom', $data[0]['country']);
        $this->assertEquals('NW17 2LG', $data[0]['postcode']);
        $this->assertEquals(true, $data[0]['primary']);
        $this->assertEquals("Address Index", $message);
    }

    /** Check IndexById for Not Admin
     *
     * @return void
     */
    public function testIndexByIdForNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/addresses/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check IndexById for Guest
     *
     * @return void
     */
    public function testIndexByIdForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/addresses/company/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new address for Company Manager
     *
     * @return void
     */
    public function testStoreNewAddressForCompanyManger(): void
    {
        $token = $this->loginRole('company-manager');

        // Create data
        $data = [
            'company_id' => 1,
            'address_line_1' => '88 West Street',
            'address_line_2' => null,
            'city' => 'LEICESTER',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => true
        ];

        $response = $this->post('api/v1/addresses?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "address_line_1",
                        "address_line_2",
                        "city",
                        "country",
                        "postcode",
                        "primary",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals('88 West Street', $data['address_line_1']);
        $this->assertEquals(null, $data['address_line_2']);
        $this->assertEquals('LEICESTER', $data['city']);
        $this->assertEquals('United kingdom', $data['country']);
        $this->assertEquals('LE4 7EN', $data['postcode']);
        $this->assertEquals(true, $data['primary']);
        $this->assertEquals("Created new Address", $message);

        $addressCompany = DB::table('address_companies')
            ->where('company_id', 1)
            ->where('address_id', $data['id'])
            ->first();

        $this->assertTrue($addressCompany !== null, 'Record was not saved to address_companies table');
    }

    /**
     * Check Store New Address By Authenticated User not Admin
     *
     * @return void
     */
    public function testStoreNewUserByAuthenticatedUserNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            'company_id' => 1,
            'address_line_1' => '88 West Street',
            'address_line_2' => null,
            'city' => 'LEICESTER',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => true
        ];

        $response = $this->post('api/v1/addresses?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Store A Wrong Data For Admin
     *
     * @return void
     */
    public function testStoreAWrongDataForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'company_id' => 'test',
            'address_line_1' => 1584,
            'address_line_2' => 588,
            'city' => 5654,
            'country' => [],
            'postcode' => [],
            'primary' => 11111
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/addresses?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(7, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store For Not Authenticated User
     *
     * @return void
     */
    public function testStoreForNotAuthenticatedUser(): void
    {
        // Create data
        $data = [
            'company_id' => 1,
            'address_line_1' => '88 West Street',
            'address_line_2' => null,
            'city' => 'LEICESTER',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => true
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/addresses?token=', $data);

        // Check response status
        $response->assertStatus(401);

        $responseJSON = json_decode($response->getContent(), true);

        $this->assertEquals("Unauthorized", $response['error']);
    }

    /**
     * Check Store Address With Wrong Company ID for admin group
     *
     * @return void
     */
    public function testCheckStoreAddressWithWrongCompanyIdForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'company_id' => 99999,
            'address_line_1' => '88 West Street',
            'address_line_2' => null,
            'city' => 'LEICESTER',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => true
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/addresses?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Specific Address for Company Manager
     *
     * @return void
     */
    public function testShowSpecificAddressForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response =
            $this->get('api/v1/addresses/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "address_line_1",
                        "address_line_2",
                        "city",
                        "country",
                        "postcode",
                        "primary",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('1 York Road', $data['address_line_1']);
        $this->assertEquals('9623 Church Lane', $data['address_line_2']);
        $this->assertEquals('LONDON', $data['city']);
        $this->assertEquals('United kingdom', $data['country']);
        $this->assertEquals('NW17 2LG', $data['postcode']);
        $this->assertEquals(true, $data['primary']);
        $this->assertEquals("Got Specific Address", $message);
    }

    /**
     * Check Specific Address By Company Manager From another company
     *
     * @return void
     */
    public function testShowSpecificAddressByManagerFromAnotherCompany(): void
    {
        $token = $this->loginRole('company-manager');

        // Request
        $response = $this->get('api/v1/addresses/6?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Get Address for Guest
     *
     * @return void
     */
    public function testShowSpecificAddressForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/addresses/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Address With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificAddressWithWrongIdForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->get('api/v1/addresses/99999996?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Address For Company Manager
     *
     * @return void
     */
    public function testUpdateAddressForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');

        // Create data
        $data = [
            'address_line_1' => 'Test Street',
            'address_line_2' => null,
            'city' => 'LONDON',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => false
        ];

        $response = $this->put('api/v1/addresses/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "address_line_1",
                        "address_line_2",
                        "city",
                        "country",
                        "postcode",
                        "primary",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('Test Street', $data['address_line_1']);
        $this->assertEquals(null, $data['address_line_2']);
        $this->assertEquals('LONDON', $data['city']);
        $this->assertEquals('United kingdom', $data['country']);
        $this->assertEquals('LE4 7EN', $data['postcode']);
        $this->assertEquals(false, $data['primary']);
        $this->assertEquals("Updated The Address.", $message);
    }

    /**
     * Check Update Address For Super Admin
     *
     * @return void
     */
    public function testUpdateAddressForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'address_line_1' => 'Admin Street',
            'address_line_2' => null,
            'city' => 'LONDON',
            'country' => 'United kingdom',
            'postcode' => 'LE4 7EN',
            'primary' => true
        ];

        $response = $this->put('api/v1/addresses/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        "id",
                        "address_line_1",
                        "address_line_2",
                        "city",
                        "country",
                        "postcode",
                        "primary",
                        "created_at",
                        "updated_at"
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('Admin Street', $data['address_line_1']);
        $this->assertEquals(null, $data['address_line_2']);
        $this->assertEquals('LONDON', $data['city']);
        $this->assertEquals('United kingdom', $data['country']);
        $this->assertEquals('LE4 7EN', $data['postcode']);
        $this->assertEquals(true, $data['primary']);
        $this->assertEquals("Updated The Address.", $message);
    }

    /**
     * Check Update Address By Other Authenticated User not Admin
     *
     * @return void
     */
    public function testUpdateAddressByOtherAuthenticatedUserNotAdmin(): void
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            "primary" => false
        ];

        $response = $this->put('api/v1/addresses/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Update Address For Guest
     *
     * @return void
     */
    public function testUpdateAddressForGuest(): void
    {
        // Request
        // Create data
        $data = [
            "primary" => true,
        ];

        $response = $this->put('api/v1/addresses/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Address For Wrong Address ID For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongAddressIdForTheAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        // Create data
        $data = [
            "primary" => true
        ];

        $response = $this->put('api/v1/addresses/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Address With Wrong Data For The Admin.
     *
     * @return void
     */
    public function testUpdateAddressWithWrongDataForTheAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        // Create data
        $data = [
            'address_line_1' => 123,
            'address_line_2' => 365,
            'city' => [],
            'country' => [],
            'postcode' => 154145,
            'primary' => 151616
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/addresses/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(6, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Delete Address For Super Admin
     *
     * @return void
     */
    public function testDeleteAddressForSuperAdmin(): void
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->delete('api/v1/addresses/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Address.", $message);

        $addresses = DB::table('addresses')->where('id', 3)->first();
        $this->assertEquals(null, $addresses);
    }

    /**
     * Not admin user tries to delete address
     *
     * @return void
     */
    public function testDeleteNotAdminUserTriesToDeleteAddress(): void
    {
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->delete('api/v1/addresses/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Delete Address With Wrong ID For Admin
     *
     * @return void
     */
    public function testDeleteUserWithWrongIDForAdmin(): void
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->delete('api/v1/addresses/555555?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Address By Guest
     *
     * @return void
     */
    public function testDeleteAddressByGuest(): void
    {
        // Request
        $response = $this->delete('api/v1/addresses/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Empty Index for CompanyManager
     *
     * @return void
     */
    public function testIndexEmptyForCompanyManager(): void
    {
        $token = $this->loginRole('company-manager');
        DB::table('addresses')->delete();

        // Request
        $response = $this->get('api/v1/addresses/company/1?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }
}
