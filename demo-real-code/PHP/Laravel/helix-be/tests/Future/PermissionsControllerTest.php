<?php

namespace Tests\Functional\API\V1;

use Spatie\Permission\Models\Permission;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class PermissionsControllerTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $permissions = DB::table('permissions')->get();

        $this->assertEquals(8, $permissions->count());

        $permission = DB::table('permissions')->first();

        $this->assertEquals('users store', $permission->name);
        $this->assertEquals(1, $permission->id);
    }


    /**
     * Full index for super-admin.
     *
     * @return void
     */
    public function testIndexForSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/permissions?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'name',
                            'guard_name',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals('Created Permission Index.', $message);
    }

    /** Check Index for Not Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/permissions?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/v1/permissions');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Show Specific Permission for Super Admin
     *
     * @return void
     */
    public function testShowSpecificPermissionForSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/permissions/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('users store', $data['name']);
        $this->assertEquals('api', $data['guard_name']);
        $this->assertEquals("Got Specific Permission.", $message);
    }

    /**
     * Check Specific Permission By not admin
     *
     * @return void
     */
    public function testShowSpecificPermissionByNotAdmin()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/permissions/5?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Get Permission for Guest
     *
     * @return void
     */
    public function testShowSpecificPermissionForGuest()
    {
        // Request
        $response = $this->get('api/v1/permissions/6');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Permission With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificPermissionWithWrongIdForAdmin()
    {
        // Login via admin.
        $token = $this->loginRole('admin');

        // Request
        $response = $this->get('api/v1/permissions/99999996?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Empty Index for Admin
     *
     * @return void
     */
    public function testIndexEmptyForAdmin()
    {
        $token = $this->loginRole('admin');
        DB::table('permissions')->delete();

        // Request
        $response = $this->get('api/v1/permissions?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Store a new Permission via Super Admin
     *
     * @return void
     */
    public function testStoreNewPermissionViaSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'name'            => 'users store',
            'guard_name'      => 'api',
        ];

        // Request
        $response = $this->post('api/v1/permissions?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('users store', $data['name']);
        $this->assertEquals('api', $data['guard_name']);
        $this->assertEquals("Created new Permission.", $message);
    }

    /**
     * Check Store New Permission by Authenticated User not Admin
     *
     * @return void
     */
    public function testStoreNewPermissionByAuthenticatedUserNotAdmin()
    {
        //Login via article-author
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            'name'            => 'users store',
            'guard_name'      => 'api',
        ];

        // Request
        $response = $this->post('api/v1/permissions?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Store A Wrong Data By Admin
     *
     * @return void
     */
    public function testStoreAWrongDataByAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'name'       => 'test',
            'guard_name' => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/permissions?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store New Permission by Guest
     *
     * @return void
     */
    public function testStoreNewPermissionByGuest()
    {
        // Create data
        $data = [
            'name'       => 'test',
            'guard_name' => 'api',
        ];

        // Request
        $response = $this->post('api/v1/permissions?token=', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Permission By Super Admin
     *
     * @return void
     */
    public function testUpdatePermissionBySuperAdmin()
    {
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'name' => 'users update',
        ];

        // Request
        $response = $this->put('api/v1/permissions/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('users update', $data['name']);
        $this->assertEquals("Updated The Permission.", $message);
    }

    /**
     * Check Update New Permission By Authenticated User not Admin
     *
     * @return void
     */
    public function testUpdatePermissionByAuthenticatedUserNotAdmin()
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            "name" => 'users delete'
        ];

        // Request
        $response = $this->put('api/v1/permissions/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Update Permission For Guest
     *
     * @return void
     */
    public function testUpdatePermissionForGuest()
    {
        // Create data
        $data = [
            "name" => 'Company Creator',
        ];

        // Request
        $response = $this->put('api/v1/permissions/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Permission With Wrong Permission ID For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongPermissionIdForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "name" => 'users store',
        ];

        // Request
        $response = $this->put('api/v1/permissions/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Permission With Wrong Data For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongDataForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "name" => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/permissions/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }


    /**
     * Not admin user tries to delete Permission
     *
     * @return void
     */
    public function testDeleteNotAdminUserTriesToDeletePermission()
    {
        $articleAuthorToken = $this->loginRole('article-author');

        // Request
        $response = $this->delete('api/v1/permissions/1?token=' . $articleAuthorToken);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Delete Permission With Wrong ID For Admin
     *
     * @return void
     */
    public function testDeletePermissionWithWrongIDForAdmin()
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->delete('api/v1/permissions/555555?token=' . $token);

        // Check response status
        $response->assertStatus(422);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(422, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Permission By Guest
     *
     * @return void
     */
    public function testDeletePermissionByGuest()
    {
        // Request
        $response = $this->delete('api/v1/permissions/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Permission For Super Admin
     *
     * @return void
     */
    public function testDeletePermissionForSuperAdmin()
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->delete('api/v1/permissions/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Permission.", $message);

        $removedPermission = Permission::where('id', 1)->first();
        $this->assertEquals(null, $removedPermission);
    }

}
