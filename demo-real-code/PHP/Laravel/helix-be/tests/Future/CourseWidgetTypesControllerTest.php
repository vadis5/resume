<?php

namespace Tests\Functional\API\V1;

use App\Models\CourseWidgetType;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

/**
 * CourseWidgetTypesControllerTest for Tests of Course Widget Types
 *
 * PHP version 7.4
 *
 * @category Seeder
 * @package  Tests\Functional\API\v1
 * @author   Pasholka Artem <artem.pasholka@intellicagroup.com>
 * @license  BSD License
 * @link     Tests\Functional\API\v1
 */
class CourseWidgetTypesControllerTest extends TestCase
{
    use DatabaseMigrations;

    private const TABLE_NAME = 'course_widget_types';
    private const SUPER_ADMIN = ['super-admin@admin.com', 'Super Admin'];
    private const HELIX_ADMIN = ['helix-admin@admin.com', 'Helix Admin'];
    private const TENANT_ADMIN_1 = ['tenant-admin-1@admin.com', 'Tenant Admin 1'];
    private const TENANT_ADMIN_2 = ['tenant-admin-2@admin.com', 'Tenant Admin 2'];
    private const TENANT_USER_1 = ['tenant-user-1@admin.com', 'Tenant User 1'];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsCourseWidgetTypesSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder(): void
    {
        $courseWidgetTypes = DB::table(self::TABLE_NAME)->get();

        $this->assertEquals(9, $courseWidgetTypes->count());

        $courseWidgetType = DB::table(self::TABLE_NAME)->first();

        $this->assertEquals(1, $courseWidgetType->id);
        $this->assertEquals('podcast', $courseWidgetType->type);
    }

    /**
     * Full index for tenant-admin.
     *
     * @return void
     */
    public function testIndexForTenantAdmin(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'type',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals('podcast', $data[0]['type']);
        $this->assertEquals('Course Widget Types Index.', $message);
    }

    /**
     * Full index for helix-admin.
     *
     * @return void
     */
    public function testIndexForHelixAdmin(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'type',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(9, $data);
        $this->assertEquals('podcast', $data[0]['type']);
        $this->assertEquals('Course Widget Types Index.', $message);
    }

    /**
     * Full index for helix-admin.
     *
     * @return void
     */
    public function testEmptyIndexForTenantAdmin(): void
    {
        DB::table('course_widget_types')->delete();

        // Login via super-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Full index for tenant-user(forbidden).
     *
     * @return void
     */
    public function testIndexByTenantUser(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Full index for Guest(Unauthorized)
     *
     * @return void
     */
    public function testIndexByGuest(): void
    {
        // Request
        $response = $this->get('api/v1/courseWidgetTypes');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Course Widget Type for Tenant Admin
     *
     * @return void
     */
    public function testShowSpecificCourseWidgetTypeForTenantAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes/2?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals(2, $data['id']);
        $this->assertEquals('video', $data['type']);
        $this->assertEquals('Got specific Course Widget Type.', $message);
    }

    /**
     * Check Specific Course Widget Type for Helix Admin
     *
     * @return void
     */
    public function testShowSpecificCourseWidgetTypeForHelixAdmin(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes/2?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals(2, $data['id']);
        $this->assertEquals('video', $data['type']);
        $this->assertEquals('Got specific Course Widget Type.', $message);
    }

    /**
     * Check Specific Course Widget Type with wrong ID
     *
     * @return void
     */
    public function testShowSpecificCourseWidgetTypeWithWrongId(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes/1111111?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Specific Course Widget Type for tenant-user(forbidden).
     *
     * @return void
     */
    public function testShowSpecificCourseWidgetTypeForTenantUser(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/v1/courseWidgetTypes?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Specific Course Widget Type for Guest(Unauthorized)
     *
     * @return void
     */
    public function testShowSpecificCourseWidgetTypeByGuest(): void
    {
        // Request
        $response = $this->get('api/v1/courseWidgetTypes');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Course Widget Type via Super Admin
     *
     * @return void
     */
    public function testStoreNewCourseWidgetTypeViaSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Create data
        $data = [
            "type" => "video-podcast"
        ];

        // Request
        $response = $this->post('api/v1/courseWidgetTypes?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals('video-podcast', $data['type']);
        $this->assertEquals("Created new Course Widget Type.", $message);

        $courseWidgetType = CourseWidgetType::where('type', 'video-podcast')->first();

        $this->assertNotEquals(null, $courseWidgetType);
        $this->assertEquals('video-podcast', $courseWidgetType->type);
    }

    /**
     * Check Store a new Course Widget Type via Helix Admin
     *
     * @return void
     */
    public function testStoreNewCourseWidgetTypeViaHelixAdmin(): void
    {
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Create data
        $data = [
            "type" => "video-podcast2"
        ];

        // Request
        $response = $this->post('api/v1/courseWidgetTypes?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals('video-podcast2', $data['type']);
        $this->assertEquals("Created new Course Widget Type.", $message);

        $courseWidgetType = CourseWidgetType::where('type', 'video-podcast2')->first();

        $this->assertNotEquals(null, $courseWidgetType);
        $this->assertEquals('video-podcast2', $courseWidgetType->type);
    }

    /**
     * Check Store a new Course Widget Type via Helix Admin With Wrong Data
     *
     * @return void
     */
    public function testStoreNewCourseWidgetTypeViaHelixAdminWithWrongData(): void
    {
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Create data
        $data = [
            "type" => 3
        ];

        // Request
        $response = $this->post('api/v1/courseWidgetTypes?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store a new Course Widget Type via Tenant Admin(forbidden)
     *
     * @return void
     */
    public function testStoreNewCourseWidgetTypeViaTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Create data
        $data = [
            "type" => "video2"
        ];

        // Request
        $response = $this->post('api/v1/courseWidgetTypes?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Store a new Course Widget Type by guest
     *
     * @return void
     */
    public function testStoreNewCourseWidgetTypeByGuest(): void
    {
        // Create data
        $data = [
            "type" => "new-type",
        ];

        // Request
        $response = $this->post('api/v1/courseWidgetTypes', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Course Widget Type By Super Admin
     *
     * @return void
     */
    public function testUpdateCourseWidgetTypeBySuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Create data
        $data = [
            "type" => "video-podcast",
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals('video-podcast', $data['type']);
        $this->assertEquals('Updated The Course Widget Type.', $message);
    }

    /**
     * Check Update Course Widget Type By Helix Admin
     *
     * @return void
     */
    public function testUpdateCourseWidgetTypeByHelixAdmin(): void
    {
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Create data
        $data = [
            "type" => "video2",
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'type',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(4, $data);
        $this->assertEquals('video2', $data['type']);
        $this->assertEquals('Updated The Course Widget Type.', $message);
    }

    /**
     * Check Update a Course Widget Type via Helix Admin With Wrong Data
     *
     * @return void
     */
    public function testUpdateCourseWidgetTypeViaHelixAdminWithWrongData(): void
    {
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Create data
        $data = [
            "type" => 3
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Update Specific Course Widget Type with wrong ID
     *
     * @return void
     */
    public function testUpdateSpecificCourseWidgetTypeWithWrongId(): void
    {
        // Login via tenant-admin
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Create data
        $data = [
            "type" => "video2"
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/1111111?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update a Course Widget Type via Tenant Admin(forbidden)
     *
     * @return void
     */
    public function testUpdateCourseWidgetTypeViaTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Create data
        $data = [
            "type" => "video2"
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Update a Course Widget Type by guest
     *
     * @return void
     */
    public function testUpdateCourseWidgetTypeByGuest(): void
    {
        // Create data
        $data = [
            "type" => "new-type",
        ];

        // Request
        $response = $this->put('api/v1/courseWidgetTypes/2', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Course Widget Type For Super Admin
     *
     * @return void
     */
    public function testDeleteCourseWidgetTypeForSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->delete('api/v1/courseWidgetTypes/2?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Course Widget Type.", $message);

        $deletedModel = CourseWidgetType::whereId(2)->first();
        $this->assertEquals(null, $deletedModel);
    }

    /**
     * Check Delete Course Widget Type For Helix Admin
     *
     * @return void
     */
    public function testDeleteCourseWidgetTypeForHelixAdmin(): void
    {
        $token = $this->loginByEmail(self::HELIX_ADMIN[0], self::HELIX_ADMIN[1]);

        // Request
        $response = $this->delete('api/v1/courseWidgetTypes/3?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Course Widget Type.", $message);

        $deletedModel = CourseWidgetType::whereId(3)->first();
        $this->assertEquals(null, $deletedModel);
    }

    /**
     * Check Delete Course Widget Type With Wrong ID For Super Admin
     *
     * @return void
     */
    public function testDeleteCourseWidgetTypeWithWrongIdForSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        // Request
        $response = $this->delete('api/v1/courseWidgetTypes/555555?token=' . $token);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     *  Tenant Admin tries to delete Course Widget Type
     *
     * @return void
     */
    public function testDeleteCourseWidgetTypeByTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_2[0], self::TENANT_ADMIN_2[1]);

        // Request
        $response = $this->delete('api/v1/courseWidgetTypes/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Delete Course Widget Type By Guest
     *
     * @return void
     */
    public function testDeleteCourseWidgetTypeByGuest(): void
    {
        // Request
        $response = $this->delete('api/v1/courseWidgetTypes/3');

        // Check response status
        $response->assertStatus(401);
    }
}
