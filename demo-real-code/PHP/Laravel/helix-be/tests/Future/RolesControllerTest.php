<?php

namespace Tests\Functional\API\V1;

use Illuminate\Support\Facades\Config;
use Spatie\Permission\Models\Role;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class RolesControllerTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $roles = DB::table('roles')->get();

        $rolesCount = count(Config::get('tests.roles'));
        $this->assertEquals($rolesCount, $roles->count());

        $role = DB::table('roles')->first();

        $this->assertEquals('super-admin', $role->name);
        $this->assertEquals('api', $role->guard_name);
        $this->assertEquals(1, $role->id);
    }


    /**
     * Full index for super-admin.
     *
     * @return void
     */
    public function testIndexForSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/roles?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'name',
                            'guard_name',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $rolesCount = count(Config::get('tests.roles'));
        $this->assertCount($rolesCount, $data);
        $this->assertEquals('Created Role Index.', $message);
    }

    /** Check Index for Not Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/roles?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/v1/roles');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Show Specific Role for Super Admin
     *
     * @return void
     */
    public function testShowSpecificRoleForSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/roles/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('super-admin', $data['name']);
        $this->assertEquals('api', $data['guard_name']);
        $this->assertEquals("Got Specific Role.", $message);
    }

    /**
     * Check Specific Role By not admin
     *
     * @return void
     */
    public function testShowSpecificRoleByNotAdmin()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/roles/5?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Get Role for Guest
     *
     * @return void
     */
    public function testShowSpecificRoleForGuest()
    {
        // Request
        $response = $this->get('api/v1/roles/6');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Role With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificRoleWithWrongIdForAdmin()
    {
        // Login via admin.
        $token = $this->loginRole('admin');

        // Request
        $response = $this->get('api/v1/roles/99999996?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Store a new Role via Super Admin
     *
     * @return void
     */
    public function testStoreNewRoleViaSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'name'            => 'test-role',
            'guard_name'      => 'api',
        ];

        // Request
        $response = $this->post('api/v1/roles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('test-role', $data['name']);
        $this->assertEquals('api', $data['guard_name']);
        $this->assertEquals("Created new Role.", $message);
    }

    /**
     * Check Store New Role by Authenticated User not Admin
     *
     * @return void
     */
    public function testStoreNewRoleByAuthenticatedUserNotAdmin()
    {
        //Login via article-author
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            'name'            => 'article-test',
            'guard_name'      => 'api',
        ];

        // Request
        $response = $this->post('api/v1/roles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Store A Wrong Data By Admin
     *
     * @return void
     */
    public function testStoreAWrongDataByAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'name'       => [],
            'guard_name' => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/roles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(2, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store New Role by Guest
     *
     * @return void
     */
    public function testStoreNewRoleByGuest()
    {
        // Create data
        $data = [
            'name'       => 'test-role',
            'guard_name' => 'api',
        ];

        // Request
        $response = $this->post('api/v1/roles?token=', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Role By Super Admin
     *
     * @return void
     */
    public function testUpdateRoleBySuperAdmin()
    {
        $token = $this->loginRole('super-admin');

        // Create data
        $data = [
            'name' => 'test-role',
        ];

        // Request
        $response = $this->put('api/v1/roles/12?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'name',
                        'guard_name',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(5, $data);
        $this->assertEquals('test-role', $data['name']);
        $this->assertEquals("Updated The Role.", $message);
    }

    /**
     * Check Update Role By Authenticated User not Admin
     *
     * @return void
     */
    public function testUpdateRoleByAuthenticatedUserNotAdmin()
    {
        $token = $this->loginRole('article-author');

        // Create data
        $data = [
            "name" => 'test-role'
        ];

        // Request
        $response = $this->put('api/v1/roles/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Update Role For Guest
     *
     * @return void
     */
    public function testUpdateRoleForGuest()
    {
        // Create data
        $data = [
            "name" => 'test-role',
        ];

        // Request
        $response = $this->put('api/v1/roles/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Role With Wrong Role ID For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongRoleIdForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "name" => 'test-role',
        ];

        // Request
        $response = $this->put('api/v1/roles/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Role With Wrong Data For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongDataForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "name" => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/roles/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }


    /**
     * Not admin user tries to delete Role
     *
     * @return void
     */
    public function testDeleteNotAdminUserTriesToDeleteRole()
    {
        $articleAuthorToken = $this->loginRole('article-author');

        // Request
        $response = $this->delete('api/v1/roles/1?token=' . $articleAuthorToken);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Delete Role With Wrong ID For Admin
     *
     * @return void
     */
    public function testDeleteRoleWithWrongIDForAdmin()
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->delete('api/v1/roles/555555?token=' . $token);

        // Check response status
        $response->assertStatus(422);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(422, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Role By Guest
     *
     * @return void
     */
    public function testDeleteRoleByGuest()
    {
        // Request
        $response = $this->delete('api/v1/roles/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Role For Super Admin
     *
     * @return void
     */
    public function testDeleteRoleForSuperAdmin()
    {
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->delete('api/v1/roles/10?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Role.", $message);

        $removedRole = Role::where('id', 10)->first();
        $this->assertEquals(null, $removedRole);
    }

}
