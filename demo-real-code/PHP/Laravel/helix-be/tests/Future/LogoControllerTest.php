<?php

namespace Tests\Functional\API\V1;


use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use App\Traits\ApiResponse;

class LogoControllerTest extends TestCase
{
    use DatabaseMigrations, ApiResponse;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestLogoSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder(): void
    {
        $companies = DB::table('companies')->get();
        $this->assertEquals(2, $companies->count());

        $firstCompany = DB::table('companies')->where('id', 1)->first();
        $this->assertEquals('/logos/1.jpg', $firstCompany->logo);

        $secondCompany = DB::table('companies')->where('id', 2)->first();
        $this->assertEquals('/logos/2.jpg', $secondCompany->logo);
    }

    /**
     * Check Store a new logo for Tenant Admin
     *
     * @return void
     */
    public function testStoreByTenantAdmin(): void
    {
        $token = $this->loginRole('tenant-admin');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'tenant_id',
                        'logo'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array
        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(2, $data);
        $this->assertEquals('/logos/1.jpg', $data['logo']);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals("Uploaded new Logo", $message);

        $this->assertTrue(Storage::disk('logos')->exists('1.jpg'));
    }

    /**
     * Check Store a new logo for Guest
     *
     * @return void
     */
    public function testStoreByGuest(): void
    {
        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new logo with wrong permissions
     *
     * @return void
     */
    public function testStoreWithWrongPermissions(): void
    {
        $token = $this->loginRole('helix-admin');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Store a new logo with wrong size of file
     *
     * @return void
     */
    public function testStoreWithWrongSizeOfFile(): void
    {
        $token = $this->loginRole('tenant-admin');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(10240);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store a new logo with wrong type of file
     *
     * @return void
     */
    public function testStoreWithWrongTypeOfFile(): void
    {
        $token = $this->loginRole('tenant-admin');

        $file = UploadedFile::fake()->image('vblmkb.png', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store a new logo with wrong heights of file
     *
     * @return void
     */
    public function testStoreWithWrongHeightOfFile(): void
    {
        $token = $this->loginRole('tenant-admin');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 500)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store a new logo with wrong width of file
     *
     * @return void
     */
    public function testStoreWithWrongWidthOfFile(): void
    {
        $token = $this->loginRole('tenant-admin');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 500, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Update a new logo for Tenant Admin
     *
     * @return void
     */
//    public function testUpdateByTenantAdmin(): void
//    {
//        $token = $this->loginRole('tenant-admin');
//
//        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);
//
//        $data = [
//            'tenant_id' => 1,
//            'logo' => $file
//        ];
//
//        $response = $this->withHeader('Accept', 'application/json')
//            ->put('api/v1/logo/tenant/1?token=' . $token, $data);
//
//        // Check response status
//        $response->assertStatus(200);
//
//        // Check response structure
//        $response->assertJsonStructure(
//            [
//                'success',
//                'code',
//                'data' =>
//                    [
//                        'tenant_id',
//                        'logo'
//                    ],
//                'message'
//            ]
//        );
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];  // array
//        $code         = $responseJSON['code'];     // array
//        $message      = $responseJSON['message'];  // array
//        $data         = $responseJSON['data'];     // array
//        $this->assertEquals(true, $success);
//        $this->assertEquals(200, $code);
//        $this->assertCount(2, $data);
//        $this->assertEquals('/logos/1.jpg', $data['logo']);
//        $this->assertEquals(1, $data['tenant_id']);
//        $this->assertEquals("Updated The Logo", $message);
//
//        $this->assertTrue(Storage::disk('logos')->exists('1.jpg'));
//    }

    /**
     * Check Update a new logo for Tenant Admin
     *
     * @return void
     */
//    public function testUpdateByTenantAdminWithWrongData(): void
//    {
//        $token = $this->loginRole('tenant-admin');
//
//        $file = UploadedFile::fake()->image('vblmkb.jpg', 500, 600)->size(5120);
//
//        $data = [
//            'tenant_id' => 1,
//            'logo' => $file
//        ];
//
//        $response = $this->withHeader('Accept', 'application/json')
//            ->put('api/v1/logo/tenant/1?token=' . $token, $data);
//
//        // Check response status
//        $response->assertStatus(422);
//
//        // Check response structure
//        $response->assertJsonStructure(
//            [
//                'message',
//                'errors'
//            ]
//        );
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $message      = $responseJSON['message'];    // array
//        $errors       = $responseJSON['errors'];     // array
//
//        $this->assertCount(1, $errors);
//        $this->assertEquals("The given data was invalid.", $message);
//    }

    /**
     * Check Update a new logo for alien Tenant Admin
     *
     * @return void
     */
    public function testUpdateByAlienTenantAdmin(): void
    {
        $token = $this->loginRole('tenant-admin2');

        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo/tenant/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent', $message);
    }

    /**
     * Check Update a new logo for guest
     *
     * @return void
     */
    public function testUpdateByGuest(): void
    {
        $file = UploadedFile::fake()->image('vblmkb.jpg', 600, 600)->size(5120);

        $data = [
            'tenant_id' => 1,
            'logo' => $file
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo/tenant/1', $data);

        // Check response status
        $response->assertStatus(401);
    }


    /**
     * Check Specific Logo for Tenant Admin
     *
     * @return void
     */
    public function testShowByTenantAdmin(): void
    {
        $token = $this->loginRole('tenant-admin');

        // Request
        $response = $this->get('api/v1/logo/tenant/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'tenant_id',
                        'logo'
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(2, $data);
        $this->assertEquals('/logos/1.jpg', $data['logo']);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals("Got Specific Logo", $message);
    }

    /**
     * Check Specific Logo for Guest
     *
     * @return void
     */
    public function testShowSpecificForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/logo/tenant/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Logo by Manager from another company
     *
     * @return void
     */
    public function testShowSpecificByManagerFromAnotherCompany(): void
    {
        $token = $this->loginRole('tenant-admin');

        // Request
        $response = $this->get('api/v1/logo/tenant/44444?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Index Helix Admin
     *
     * @return void
     */
    public function testIndexForHelixAdmin(): void
    {
        $token = $this->loginRole('helix-admin');

        // Request
        $response = $this->get('api/v1/logo?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'tenant_id',
                            'logo',
                            'logo_status'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);

        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(2, $data);
        $this->assertEquals(1, $data[0]['tenant_id']);
        $this->assertEquals('/logos/1.jpg', $data[0]['logo']);
        $this->assertEquals(true, $data[0]['logo_status']);
        $this->assertEquals('Logo Index', $message);
    }

    /**
     * Check Index for not Super Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin(): void
    {
        $token = $this->loginRole('tenant-admin');

        // Request
        $response = $this->get('api/v1/logo?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index by Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/v1/logo');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Empty Index Helix Admin
     *
     * @return void
     */
    public function testEmptyIndexForHelixAdmin(): void
    {
        $token = $this->loginRole('helix-admin');
        DB::table('companies')->delete();

        // Request
        $response = $this->get('api/v1/logo?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Delete Logo For Tenant Admin
     *
     * @return void
     */
    public function testDeleteByTenantAdmin(): void
    {
        $token = $this->loginRole('tenant-admin');

        // Request
        $response = $this->delete('api/v1/logo/tenant/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Logo", $message);

        $contacts = DB::table('companies')->where('id', 1)->first();
        $this->assertEquals(null, $contacts->logo);
    }

    /**
     * Check Delete Logo For not tenant admin
     *
     * @return void
     */
    public function testDeleteForNotTenantAdmin(): void
    {
        $token = $this->loginRole('student');

        // Request
        $response = $this->delete('api/v1/logo/tenant/1?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent.", $message);
    }

    /**
     * Check Delete Logo For not tenant admin
     *
     * @return void
     */
//    public function testDeleteForAlienTenantAdmin(): void
//    {
//        $token = $this->loginRole('tenant-admin2');
//
//        // Request
//        $response = $this->delete('api/v1/logo/tenant/1?token=' . $token);
//
//        // Check response status
//        $response->assertStatus(403);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];  // array
//        $code         = $responseJSON['code'];     // array
//        $message      = $responseJSON['message'];  // array
//
//        $this->assertEquals(false, $success);
//        $this->assertEquals(403, $code);
//        $this->assertEquals("Permission is absent.", $message);
//    }

    /**
     * Check Delete Logo For Guest
     *
     * @return void
     */
    public function testDeleteForGuest(): void
    {
        // Request
        $response = $this->delete('api/v1/logo/tenant/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Change Status of Logo By Helix Admin
     *
     * @return void
     */
    public function testChangeStatusByHelixAdmin(): void
    {
        $token = $this->loginRole('helix-admin');

        $data = [
            'tenant_id' => 1,
            'logo_status' => false
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'tenant_id',
                        'logo',
                        'logo_status'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array
        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(3, $data);
        $this->assertEquals('/logos/1.jpg', $data['logo']);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals(false, $data['logo_status']);
        $this->assertEquals("Status was changed.", $message);
    }

    /**
     * Check Change Status of Logo By Helix Admin with wrong data
     *
     * @return void
     */
    public function testChangeStatusByHelixAdminWithWrongData(): void
    {
        $token = $this->loginRole('helix-admin');

        $data = [
            'tenant_id' => 1,
            'logo_status' => 'false'
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Change Status of Logo By not Helix Admin
     *
     * @return void
     */
    public function testChangeStatusByTenantAdmin(): void
    {
        $token = $this->loginRole('tenant-admin');

        $data = [
            'tenant_id' => 1,
            'logo_status' => false
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Change Status of Logo By Guest
     *
     * @return void
     */
    public function testChangeStatusForGuest(): void
    {
        $data = [
            'tenant_id' => 1,
            'logo_status' => false
        ];

        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/logo', $data);

        // Check response status
        $response->assertStatus(401);
    }

}
