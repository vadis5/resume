<?php

namespace Tests\Functional\API\V1;

use App\Models\Profile;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class ProfilesControllerTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $users = User::get();
        $profiles = Profile::get();

        $this->assertEquals($profiles->count(), $users->count());

        $user = DB::table('users')->first();
        $profile = DB::table('profiles')->first();

        $this->assertEquals($profile->nickname, $user->name);
    }


    /**
     * Full index for super-admin.
     *
     * @return void
     */
    public function testIndexForSuperAdmin()
    {
        $profiles = Profile::get();

        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->get('api/v1/profiles?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'user_id',
                            'nickname',
                            'quiet_time_from',
                            'quiet_time_to',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount($profiles->count(), $data);
        $this->assertEquals('Created Profile Index', $message);
    }

    /** Check Index for Not Admin
     *
     * @return void
     */
    public function testIndexForNotAdmin()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        // Request
        $response = $this->get('api/v1/profiles?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals("Permission is absent", $message);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/v1/profiles');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Show Specific Profile for Super Admin
     *
     * @return void
     */
    public function testShowSpecificProfileForSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        //Get Profile with not Super Admin nickname
        $profile = Profile::whereNotIn('nickname', ['Super Admin'])->first();

        // Request
        $response = $this->get('api/v1/profiles/' . $profile->id . '?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'user_id',
                        'nickname',
                        'quiet_time_from',
                        'quiet_time_to',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(7, $data);
        $this->assertEquals($profile->nickname, $data['nickname']);
        $this->assertEquals($profile->user_id, $data['user_id']);
        $this->assertEquals($profile->quiet_time_from, $data['quiet_time_from']);
        $this->assertEquals($profile->quiet_time_to, $data['quiet_time_to']);
        $this->assertEquals("Got Specific Profile", $message);
    }

    /**
     * Check Specific Profile By not Himself
     *
     * @return void
     */
    public function testShowSpecificProfileByNotHimself()
    {
        // Login via article-author.
        $token = $this->loginRole('article-author');

        //Get Profile with not Article Author nickname
        $profile = Profile::whereNotIn('nickname', ['Article Author'])->first();

        // Request
        $response = $this->get('api/v1/profiles/' . $profile->id . '?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('You do not have permission', $message);
    }

    /**
     * Check Get Profile for Guest
     *
     * @return void
     */
    public function testShowSpecificProfileForGuest()
    {
        // Request
        $response = $this->get('api/v1/profiles/6');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific Profile With Wrong ID
     *
     * @return void
     */
    public function testShowSpecificProfileWithWrongIdForAdmin()
    {
        // Login via admin.
        $token = $this->loginRole('admin');

        // Request
        $response = $this->get('api/v1/profiles/99999996?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Empty Index for Admin
     *
     * @return void
     */
    public function testIndexEmptyForAdmin()
    {
        $token = $this->loginRole('admin');
        DB::table('profiles')->delete();

        // Request
        $response = $this->get('api/v1/profiles?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Store a new Profile via Super Admin
     *
     * @return void
     */
    public function testStoreNewProfileViaSuperAdmin()
    {
        // Login via super-admin.
        $token = $this->loginRole('super-admin');

        //Get User with super-admin nickname
        $user = User::where('email', 'super-admin@admin.com')->first();

        // Create data
        $data = [
            'user_id'         => $user->id,
            'nickname'        => 'Super Admin',
            'quiet_time_from' => Carbon::create(2020, 11, 26, 18, 0,0)->toString(),
            'quiet_time_to'   => Carbon::create(2020, 11, 26, 20, 0,0)->toString(),
        ];

        // Request
        $response = $this->post('api/v1/profiles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'user_id',
                        'nickname',
                        'quiet_time_from',
                        'quiet_time_to',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(7, $data);
        $this->assertEquals($user->id, $data['user_id']);
        $this->assertEquals('Super Admin', $data['nickname']);
        $this->assertEquals('2020-11-26 18:00:00', $data['quiet_time_from']);
        $this->assertEquals('2020-11-26 20:00:00', $data['quiet_time_to']);
        $this->assertEquals("Created new Profile", $message);
    }

    /**
     * Check Store New Profile for another user by Authenticated User not Admin
     *
     * @return void
     */
    public function testStoreNewProfileByAuthenticatedUserNotAdmin()
    {
        //Login via article-author
        $token = $this->loginRole('article-author');

        //Get User with super-admin nickname
        $user = User::where('email', 'super-admin@admin.com')->first();

        // Create data
        $data = [
            'user_id'         => $user->id,
            'nickname'        => 'Super Admin',
            'quiet_time_from' => Carbon::create(2020, 11, 26, 18, 0,0)->toString(),
            'quiet_time_to'   => Carbon::create(2020, 11, 26, 20, 0,0)->toString(),
        ];

        // Request
        $response = $this->post('api/v1/profiles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('You do not have permission', $message);
    }

    /**
     * Check Store A Wrong Data By Admin
     *
     * @return void
     */
    public function testStoreAWrongDataByAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            'user_id'         => 'test',
            'nickname'        => [],
            'quiet_time_from' => [],
            'quiet_time_to'   => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->post('api/v1/profiles?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(4, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Store New Profile by Guest
     *
     * @return void
     */
    public function testStoreNewProfileByGuest()
    {
        //Get User with super-admin nickname
        $user = User::where('email', 'super-admin@admin.com')->first();

        // Create data
        $data = [
            'user_id'         => $user->id,
            'nickname'        => 'Super Admin',
            'quiet_time_from' => Carbon::create(2020, 11, 26, 18, 0,0),
            'quiet_time_to'   => Carbon::create(2020, 11, 26, 20, 0,0),
        ];

        // Request
        $response = $this->post('api/v1/profiles?token=', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Profile By Super Admin
     *
     * @return void
     */
    public function testUpdateProfileBySuperAdmin()
    {
        $token = $this->loginRole('super-admin');

        $profile = Profile::first();

        // Create data
        $data = [
            'nickname' => 'Test Update',
        ];

        // Request
        $response = $this->put('api/v1/profiles/' . $profile->id . '?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'user_id',
                        'nickname',
                        'quiet_time_from',
                        'quiet_time_to',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(7, $data);
        $this->assertEquals('Test Update', $data['nickname']);
        $this->assertEquals("Updated The Profile.", $message);
    }

    /**
     * Check Update New Profile By Other Authenticated User not Admin
     *
     * @return void
     */
    public function testUpdateProfileByOtherAuthenticatedUserNotAdmin()
    {
        $token = $this->loginRole('article-author');

        //Get first profile(in the db we have just one profile, it's profile of super admin)
        $profile = Profile::first();

        // Create data
        $data = [
            "nickname" => 'Super Admin'
        ];

        // Request
        $response = $this->put('api/v1/profiles/' . $profile->id . '?token=' . $token, $data);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('You do not have permission.', $message);
    }

    /**
     * Check Update Profile For Guest
     *
     * @return void
     */
    public function testUpdateProfileForGuest()
    {
        // Create data
        $data = [
            "name" => 'Company Creator',
        ];

        // Request
        $response = $this->put('api/v1/profiles/3', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Profile For Wrong Profile ID For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongProfileIdForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "nickname" => 'Super Admin',
        ];

        // Request
        $response = $this->put('api/v1/profiles/888888?token=' . $token, $data);

        // Check response status
        $response->assertStatus(460);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(460, $code);
        $this->assertEquals('Wrong ID.', $message);
    }

    /**
     * Check Update Profile With Wrong Data For The Admin.
     *
     * @return void
     */
    public function testUpdateWrongDataForTheAdmin()
    {
        $token = $this->loginRole('admin');

        // Create data
        $data = [
            "nickname" => [],
        ];

        // Request
        $response = $this->withHeader('Accept', 'application/json')
            ->put('api/v1/profiles/3?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(1, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Delete Profile For Super Admin
     *
     * @return void
     */
    public function testDeleteUserForSuperAdmin()
    {
        $user = User::where('email', 'super-admin@admin.com')->first();
        $profile = Profile::where('user_id', $user->id)->first();
        $token = $this->loginRole('super-admin');

        // Request
        $response = $this->delete('api/v1/profiles/' . $profile->id . '?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Deleted The Profile.", $message);

        $removedProfile = Profile::where('id', $profile->id)->first();
        $this->assertEquals(null, $removedProfile);
    }

    /**
     * Not admin user tries to delete profile not himself
     *
     * @return void
     */
    public function testDeleteNotAdminUserTriesToDeleteProfileNotHimself()
    {
        $adminUser = User::where('email', 'admin@admin.com')->first();
        $articleAuthorUser = User::where('email', 'article-author@admin.com')->first();
        $adminData = [
            'user_id'         => $adminUser->id,
            'nickname'        => 'Super Admin',
            'quiet_time_from' => Carbon::create(2020, 11, 26, 18, 0,0)->toString(),
            'quiet_time_to'   => Carbon::create(2020, 11, 26, 20, 0,0)->toString(),
        ];
        $articleAuthorData = [
            'user_id'         => $articleAuthorUser->id,
            'nickname'        => 'Article Author',
            'quiet_time_from' => Carbon::create(2020, 11, 26, 18, 0,0)->toString(),
            'quiet_time_to'   => Carbon::create(2020, 11, 26, 20, 0,0)->toString(),
        ];
        $token = $this->loginRole('super-admin');
        // Request
        $this->post('api/v1/profiles?token=' . $token, $adminData);
        $this->post('api/v1/profiles?token=' . $token, $articleAuthorData);

        $profile = Profile::where('user_id', $adminUser->id)->first();

        $articleAuthorToken = $this->loginRole('article-author');

        // Request
        $response = $this->delete('api/v1/profiles/' . $profile->id . '?token=' . $articleAuthorToken);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("You do not have permission.", $message);
    }

    /**
     * Check Delete Profile With Wrong ID For Admin
     *
     * @return void
     */
    public function testDeleteProfileWithWrongIDForAdmin()
    {
        $token = $this->loginRole('admin');

        // Request
        $response = $this->delete('api/v1/profiles/555555?token=' . $token);

        // Check response status
        $response->assertStatus(422);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(422, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals("Wrong ID.", $message);
    }

    /**
     * Check Delete Profile By Guest
     *
     * @return void
     */
    public function testDeleteProfileByGuest()
    {
        // Request
        $response = $this->delete('api/v1/profiles/3');

        // Check response status
        $response->assertStatus(401);
    }

}
