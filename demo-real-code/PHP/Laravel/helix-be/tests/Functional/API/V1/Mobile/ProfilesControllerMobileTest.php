<?php

namespace Tests\Functional\API\V1\Mobile;

use App\Models\Profile;
use App\Models\User;
use App\Traits\TestResponseJsonTrait;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class ProfilesControllerMobileTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const DEVELOPER = ['developer@admin.com', 'Developer'];
    private const SUPER_ADMIN = [
        'happence-super-admin@admin.com',
        'Happence Super Admin'
    ];
    private const TENANT_ADMIN_1 = [
        'tenant-1-super-admin@admin.com',
        'Tenant Super Admin'
    ];
    private const TENANT_USER = [
        'tenant-2-root-dep-1-user-1@admin.com',
        'Tenant-2 Root-Dep-1 User-1'
    ];
    private const STRUCTURE = [
        'success',
        'code',
        'data' =>
            [
                [
                    "id",
                    "nickname",
                    "user_id",
                    "quiet_time_from",
                    "quiet_time_to",
                    "created_at",
                    "updated_at"
                ]
            ],
        'message'
    ];

    private const STRUCTURE_SINGLE = [
        'success',
        'code',
        'data' =>
            [
                "id",
                "nickname",
                "user_id",
                "quiet_time_from",
                "quiet_time_to",
                "avatar_path",
                "created_at",
                "updated_at"
            ],
        'message'
    ];

    private const STRUCTURE_SIMPLE = [
        'success',
        'code',
        'data',
        'message'
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsProfilesSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $users = User::get();
        $profiles = Profile::get();

        $this->assertEquals($profiles->count(), $users->count());

        $user = DB::table('users')->first();
        $profile = DB::table('profiles')->first();

        $this->assertEquals($profile->nickname, $user->name);
    }

    /**
     * Show Specific Profile for Tenant User
     *
     * @return void
     */
    public function testShowSpecificProfileForTenantUser()
    {
        // Login via super-admin.
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        // Request
        $response = $this->get('api/mobile/v1/profiles/7?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE_SINGLE);
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals('Tenant-2 Root-Dep-1 User-1', $data['nickname']);
        $this->assertEquals(7, $data['user_id']);
        $this->assertEquals('2020-11-25 09:00:00', $data['quiet_time_from']);
        $this->assertEquals('2020-11-25 10:00:00', $data['quiet_time_to']);
        $this->assertEquals("Got Specific Profile", $message);
    }

    /**
     * Check Specific Profile Without Permission
     *
     * @return void
     */
    public function testShowSpecificProfileWithoutPermission()
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        // Request
        $response = $this->get('api/mobile/v1/profiles/6?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('You do not have permission', $message);
    }

    /**
     * Check Specific Profile Without Role
     *
     * @return void
     */
    public function testShowSpecificProfileWithoutRole()
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/mobile/v1/profiles/7?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Get Profile for Guest
     *
     * @return void
     */
    public function testShowSpecificProfileForGuest()
    {
        // Request
        $response = $this->get('api/mobile/v1/profiles/6');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Profile By Tenant Admin
     *
     * @return void
     */
    public function testUpdateProfileByTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        $file = UploadedFile::fake()->image('vblmkb.svg')->size(1024);

        // Create data
        $data = [
            'avatar_path' => $file,
            'nickname' => 'Test'
        ];

        // Request
        $response = $this->put('api/mobile/v1/profiles/7?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE_SINGLE);
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals('Test', $data['nickname']);
        $this->assertEquals(7, $data['user_id']);
        $this->assertEquals('2020-11-25 09:00:00', $data['quiet_time_from']);
        $this->assertEquals('2020-11-25 10:00:00', $data['quiet_time_to']);
        $this->assertEquals('/userAvatar/7.svg', $data['avatar_path']);
        $this->assertEquals("Updated The Profile.", $message);
    }

    /**
     * Check Update Profile With Wrong Data By Tenant Admin
     *
     * @return void
     */
    public function testUpdateProfileWithWrongDataByTenantAdmin(): void
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        $file = UploadedFile::fake()->image('vblmkb.svg')->size(2048);

        // Create data
        $data = [
            'avatar_path' => $file,
            'nickname' => []
        ];

        // Request
        $response = $this->put('api/mobile/v1/profiles/7?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message = $responseJSON['message'];    // array
        $errors = $responseJSON['errors'];     // array

        $this->assertCount(2, $errors);
        $this->assertEquals('The given data was invalid.', $message);
    }

    /**
     * Check Update Profile for Guest
     *
     * @return void
     */
    public function testUpdateSpecificProfileForGuest()
    {
        // Create data
        $data = [
            'nickname' => 'Test'
        ];
        // Request
        $response = $this->put('api/mobile/v1/profiles/7', $data);

        // Check response status
        $response->assertStatus(401);
    }
}
