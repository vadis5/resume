<?php

namespace Tests\Functional\API\V1\Mobile;

use App\Traits\TestResponseJsonTrait;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class UsersControllerMobileTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const DEVELOPER = ['developer@admin.com', 'Developer'];
    private const SUPER_ADMIN = [
        'happence-super-admin@admin.com',
        'Happence Super Admin'
    ];
    private const TENANT_ADMIN_1 = [
        'tenant-1-super-admin@admin.com',
        'Tenant Super Admin'
    ];
    private const TENANT_USER = [
        'tenant-2-root-dep-1-user-1@admin.com',
        'Tenant-2 Root-Dep-1 User-1'
    ];
    private const STRUCTURE = [
        'success',
        'code',
        'data' =>
            [
                [
                    "id",
                    "name",
                    "email",
                    "status",
                    "type",
                    "created_at",
                    "updated_at"
                ]
            ],
        'message'
    ];

    private const STRUCTURE_SINGLE = [
        'success',
        'code',
        'data' =>
            [
                "id",
                "name",
                "email",
                "status",
                "type",
                "created_at",
                "updated_at"
            ],
        'message'
    ];

    private const STRUCTURE_SIMPLE = [
        'success',
        'code',
        'data',
        'message'
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsUsersSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $user = DB::table('users')->where('id', 1)->first();
        $this->assertEquals('happence-super-admin@admin.com', $user->email);
    }

    /**
     * Check Specific User for Tenant User
     *
     * @return void
     */
    public function testShowSpecificUserForTenantUser()
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        // Request
        $response = $this->get('api/v1/users/7?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE_SINGLE);
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertCount(8, $data);
        $this->assertEquals('Tenant-2 Root-Dep-1 User-1', $data['name']);
        $this->assertEquals('tenant-2-root-dep-1-user-1@admin.com', $data['email']);
        $this->assertEquals('active', $data['status']);
        $this->assertEquals('user', $data['type']);
        $this->assertEquals("Got Specific User", $message);
    }

    /**
     * Check Specific User Without Role
     *
     * @return void
     */
    public function testShowSpecificUserWithoutRole()
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        // Request
        $response = $this->get('api/mobile/v1/users/7?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('Permission is absent.', $message);
    }

    /**
     * Check Specific User Without Permission
     *
     * @return void
     */
    public function testShowSpecificUserWithoutPermission()
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        // Request
        $response = $this->get('api/mobile/v1/users/6?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(false, $success);
        $this->assertEquals(403, $code);
        $this->assertEquals('You do not have permission', $message);
    }

    /**
     * Check Get User for Guest
     *
     * @return void
     */
    public function testShowSpecificUserForGuest()
    {
        // Request
        $response = $this->get('api/mobile/v1/users/6');

        // Check response status
        $response->assertStatus(401);
    }

    public function testMeTenantUser()
    {
        $token = $this->loginByEmail(self::TENANT_USER[0], self::TENANT_USER[1]);

        $response = $this->get('api/mobile/v1/users/me?token=' . $token);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE_SINGLE);
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Tenant-2 Root-Dep-1 User-1', $data['name']);
        $this->assertEquals('tenant-2-root-dep-1-user-1@admin.com', $data['email']);
        $this->assertEquals('active', $data['status']);
        $this->assertEquals('user', $data['type']);
        $this->assertEquals("Got Me.", $message);
    }

    public function testMeTenantAdmin()
    {
        $token = $this->loginByEmail(self::TENANT_ADMIN_1[0], self::TENANT_ADMIN_1[1]);

        $response = $this->get('api/mobile/v1/users/me?token=' . $token);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE_SIMPLE);
        $resp = $this->responseParsed($response);

        $this->assertEquals(403, $resp['code']);
    }

    /**
     * Check Delete User By Guest
     *
     * @return void
     */
    public function testMeByGuest()
    {
        // Request
        $response = $this->get('api/mobile/v1/users/me');

        // Check response status
        $response->assertStatus(401);
    }
}
