<?php

namespace Tests\Functional\API\V1\Cms;


use App\Models\Setting;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class SettingsControllerTest extends TestCase
{
    use DatabaseMigrations;

    private const TERMS_VALUE = '<h1>Terms & Conditions</h1><br><h2>First header</h2><br><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tempus nunc a magna ullamcorper ullamcorper. Aenean quis sollicitudin magna, vitae dapibus magna. Integer erat risus, dignissim et est vel, tristique vulputate dolor. Pellentesque condimentum lorem in ornare efficitur. </p><h2>Second Header</h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tempus nunc a magna ullamcorper ullamcorper. Aenean quis sollicitudin magna, vitae dapibus magna. Integer erat risus, dignissim et est vel, tristique vulputate dolor. Pellentesque condimentum lorem in ornare efficitur. </p>';
    private const TABLE_NAME_SETTINGS = 'settings';
    private const ROLE_DEVELOPER = ['developer@admin.com', 'Developer'];
    private const ROLE_HAPPENCE_SUPER_ADMIN = ['happence-super-admin@admin.com', 'Happence Super Admin'];
    private const ROLE_HAPPENCE_ADMIN = ['happence-admin@admin.com', 'Happence Admin'];
    private const ROLE_HAPPENCE_EDITOR = ['happence-editor@admin.com', 'Happence Editor'];
    private const ROLE_TENANT_USER_1 = ['tenant-user-1@admin.com', 'Tenant User 1'];
    private const ROLE_TENANT_USER_2 = ['tenant-user-2@admin.com', 'Tenant User 2'];
    private const ROLE_TENANT_SUPER_ADMIN = ['tenant-super-admin@admin.com', 'Tenant Super Admin'];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsSettingSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeders(): void
    {
        $settings = Setting::all();

        $this->assertEquals(2, $settings->count());

        $setting = Setting::where('id', 1)->first();

        $this->assertEquals('terms', $setting->key);
        $this->assertEquals(self::TERMS_VALUE, $setting->value);
    }

    /**
     * Check Index of Settings
     *
     * @return void
     */
    public function testIndexSettings()
    {
        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/cms/v1/settings?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'key',
                            'value',
                            'created_at',
                            'updated_at'
                        ],
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('List of Settings.', $message);
        $this->assertCount(2, $data);
    }

    /**
     * Check Empty Index of Settings
     *
     * @return void
     */
    public function testEmptyIndexSettings()
    {
        DB::table('settings')->delete();

        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/cms/v1/settings?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/cms/v1/settings');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Show a Setting By Id via authorized user
     *
     * @return void
     */
    public function testShowById()
    {
        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/cms/v1/settings/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'key',
                        'value',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Got Specific Setting.', $message);
        $this->assertCount(5, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals('terms', $data['key']);
        $this->assertEquals(self::TERMS_VALUE, $data['value']);
    }

    /**
     * Check Show a Setting By Id with wrong Id
     *
     * @return void
     */
    public function testShowByIdWithWrongId()
    {
        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/cms/v1/settings/15555?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Show a Setting By Key for Guest
     *
     * @return void
     */
    public function testShowByKeyForGuest()
    {
        // Request
        $response = $this->get('api/cms/v1/settings/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Setting via Tenant User
     *
     * @return void
     */
    public function testStoreNewSettingViaTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Create data
        $data = [
            'key' => 'test',
            'value' => '<p>Test</p>'
        ];

        // Request
        $response = $this->post('api/cms/v1/settings?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'key',
                        'value',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Created new Setting.', $message);
        $this->assertCount(5, $data);
        $this->assertEquals('test', $data['key']);
        $this->assertEquals('<p>Test</p>', $data['value']);
    }

    /**
     * Check Setting With Wrong Data By Tenant User
     *
     * @return void
     */
    public function testStoreSettingWithWrongDataByTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Create data
        $data = [
            'key' => [],
            'value' => []
        ];

        // Request
        $response = $this->post('api/cms/v1/settings?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);


        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message = $responseJSON['message'];    // array
        $errors = $responseJSON['errors'];     // array

        $this->assertCount(2, $errors);
        $this->assertEquals('The given data was invalid.', $message);
    }

    /**
     * Check Store of Setting for Guest
     *
     * @return void
     */
    public function testStoreOfSettingForGuest(): void
    {
        // Create data
        $data = [
            'key' => 'test',
            'value' => '<p>Test</p>'
        ];

        // Request
        $response = $this->post('api/cms/v1/settings', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update Setting By Tenant User
     *
     * @return void
     */
    public function testUpdateSettingByTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Create data
        $data = [
            'key' => 'test',
            'value' => '<p>Test</p>'
        ];

        // Request
        $response = $this->put('api/cms/v1/settings/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'key',
                        'value',
                        'created_at',
                        'updated_at'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success = $responseJSON['success'];  // array
        $code = $responseJSON['code'];     // array
        $message = $responseJSON['message'];  // array
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Updated the Setting Entity.', $message);
        $this->assertCount(5, $data);
        $this->assertEquals('test', $data['key']);
        $this->assertEquals('<p>Test</p>', $data['value']);
    }

    /**
     * Check Update Setting With Wrong Data By Tenant User
     *
     * @return void
     */
    public function testUpdateSettingWithWrongDataByTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Create data
        $data = [
            'key' => [],
            'value' => []
        ];

        // Request
        $response = $this->put('api/cms/v1/settings/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message      = $responseJSON['message'];    // array
        $errors       = $responseJSON['errors'];     // array

        $this->assertCount(2, $errors);
        $this->assertEquals("The given data was invalid.", $message);
    }

    /**
     * Check Update Setting With Wrong ID For Tenant User
     *
     * @return void
     */
    public function testUpdateSettingWithWrongIdForTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Create data
        $data = [
            'key' => 'Test',
            'value' => '<p>Test</p>'
        ];

        // Request
        $response = $this->put('api/cms/v1/settings/15555?token=' . $token, $data);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals("Not found", $message);
    }

    /**
     * Check Update Setting For Guest
     *
     * @return void
     */
    public function testUpdateSettingForGuest(): void
    {
        // Create data
        $data = [
            'key' => 'Test',
            'value' => '<p>Test</p>'
        ];

        // Request
        $response = $this->put('api/cms/v1/settings/1', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Setting For Tenant User
     *
     * @return void
     */
    public function testDeleteSettingForTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->delete('api/cms/v1/settings/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('Deleted The Setting Entity.', $message);

        $removedSetting = Setting::whereId(1)->first();
        $this->assertEquals(null, $removedSetting);
    }

    /**
     * Check Delete Setting With Wrong ID For Tenant User
     *
     * @return void
     */
    public function testDeleteSettingWithWrongIdForTenantUser(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_USER_1[0], self::ROLE_TENANT_USER_1[1]);

        // Request
        $response = $this->delete('api/cms/v1/settings/555555?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Delete Setting By Guest
     *
     * @return void
     */
    public function testDeleteSettingByGuest(): void
    {
        // Request
        $response = $this->delete('api/cms/v1/settings/1');

        // Check response status
        $response->assertStatus(401);
    }
}
