<?php

namespace Tests\Functional\API\V1\Mobile;

use App\Models\UserCategory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\Traits\TestResponseJsonTrait;

class CategoriesControllerMobileTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const SUPER_ADMIN = ['super-admin@admin.com', 'Super Admin'];
    private const HELIX_ADMIN = ['helix-admin@admin.com', 'Helix Admin'];
    private const TENANT_ADMIN_1 = ['tenant-1-admin@admin.com', 'Tenant Admin'];
    private const TENANT_ADMIN_2 = ['tenant-2-admin@admin.com', 'Tenant-2 Admin'];
    private const TENANT_USER_1 = [
        'tenant-1-dep-2-child-1-user-1@admin.com',
        'Tenant-1 Dep-2 Child-1 User-1'
    ];

    private const STRUCTURE = [
        'success',
        'code',
        'data' =>
            [
                [
                    "id",
                    "name",
                    "department_id",
                    "parent_id",
                    "created_at",
                    "updated_at"
                ]
            ],
        'message'
    ];

    private const STRUCTURE_SINGLE = [
        'success',
        'code',
        'data' =>
            [
                "id",
                "name",
                "department_id",
                "parent_id",
                "created_at",
                "updated_at"
            ],
        'message'
    ];

    private const STRUCTURE_SIMPLE = [
        'success',
        'code',
        'data',
        'message'
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsCategoriesSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $users = DB::table('users')->get();

        $user = DB::table('users')->where('id', 1)->first();
        $this->assertEquals('super-admin@admin.com', $user->email);
    }

    /**
     * Check Index Tenant User
     *
     * @return void
     */
    public function testIndexForTenantUser()
    {
        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/mobile/v1/categories?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(self::STRUCTURE);
        $resp = $this->responseParsed($response);

        $this->assertEquals(true, $resp['success']);
        $this->assertEquals(200, $resp['code']);
        $this->assertEquals("Created Category list", $resp['message']);
        $this->assertCount(6, $resp['data']);
        $this->assertEquals('Category-d-2 r-4', $resp['data'][5]['name']);
        $this->assertEquals(2, $resp['data'][5]['department_id']);
        $this->assertEquals(null, $resp['data'][5]['parent_id']);
    }

    /**
     * Check Empty Index for Tenant User
     *
     * @return void
     */
    public function testIndexEmptyForTenantUser()
    {
        $token = $this->loginByEmail(self::SUPER_ADMIN[0], self::SUPER_ADMIN[1]);

        $response = $this->delete('api/v1/categories/11?token=' . $token);
        $response = $this->delete('api/v1/categories/10?token=' . $token);
        $response = $this->delete('api/v1/categories/9?token=' . $token);
        $response = $this->delete('api/v1/categories/8?token=' . $token);
        $response = $this->delete('api/v1/categories/7?token=' . $token);
        $response = $this->delete('api/v1/categories/6?token=' . $token);
        $response = $this->delete('api/v1/categories/5?token=' . $token);
        $response = $this->delete('api/v1/categories/4?token=' . $token);
        $response = $this->delete('api/v1/categories/3?token=' . $token);
        $response = $this->delete('api/v1/categories/2?token=' . $token);
        $response = $this->delete('api/v1/categories/1?token=' . $token);

        $token = $this->loginByEmail(self::TENANT_USER_1[0], self::TENANT_USER_1[1]);

        // Request
        $response = $this->get('api/mobile/v1/categories?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /** Check Index for Tenant Admin
     *
     * @return void
     */
    public function testIndexForTenantAdmin()
    {
        $token = $this->loginByEmail(
            self::TENANT_ADMIN_1[0],
            self::TENANT_ADMIN_1[1]
        );

        // Request
        $response = $this->get('api/mobile/v1/categories?token=' . $token);

        // Check response status
        $response->assertStatus(403);

        $resp = $this->responseParsed($response);

        $this->assertEquals(false, $resp['success']);
        $this->assertEquals(403, $resp['code']);
        $this->assertEquals("Permission is absent.", $resp['message']);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/v1/categories');

        // Check response status
        $response->assertStatus(401);
    }
}
