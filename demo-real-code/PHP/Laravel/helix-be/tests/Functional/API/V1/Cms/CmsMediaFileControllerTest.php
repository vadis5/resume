<?php

namespace Tests\Functional\API\V1\Cms;


use App\Models\MediaFile;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class CmsMediaFileControllerTest extends TestCase
{
    use DatabaseMigrations;

    private const TABLE_NAME_MEDIA_FILES = 'media_files';
    private const ROLE_DEVELOPER = ['developer@admin.com', 'Developer'];
    private const ROLE_HAPPENCE_SUPER_ADMIN = ['happence-super-admin@admin.com', 'Happence Super Admin'];
    private const ROLE_HAPPENCE_ADMIN = ['happence-admin@admin.com', 'Happence Admin'];
    private const ROLE_HAPPENCE_EDITOR = ['happence-editor@admin.com', 'Happence Editor'];
    private const ROLE_TENANT_USER_1 = ['tenant-user-1@admin.com', 'Tenant User 1'];
    private const ROLE_TENANT_USER_2 = ['tenant-user-2@admin.com', 'Tenant User 2'];
    private const ROLE_TENANT_SUPER_ADMIN = ['tenant-super-admin@admin.com', 'Tenant Super Admin'];
    private const RESPONSE_TAGS = [["id" => 1,"name" => "tag-1-1-1","department_id" => 1,"pivot" => ["media_file_id" => 3,"tag_id" => 1]],["id" => 2,"name" => "tag-1-1-2","department_id" => 1,"pivot" => ["media_file_id" => 3,"tag_id" => 2]]];
    private const RESPONSE_TENANT = ["id" => 2,"name" => "Tenant 1","company_number" => "11111","seats" => 3,"logo" => null,"created_at" => null,"updated_at" => null,"logo_status" => 1];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsMediaFileSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample(): void
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeders(): void
    {
        $mediaFiles = MediaFile::all();

        $this->assertEquals(2, $mediaFiles->count());

        $mediaFile = MediaFile::where('id', 1)->first();

        $this->assertEquals(1, $mediaFile->id);
        $this->assertNotNull($mediaFile->path);
        $this->assertNull($mediaFile->url);
        $this->assertEquals('New media file', $mediaFile->title);
        $this->assertEquals(null, $mediaFile->tenant_id);
        $this->assertEquals(null, $mediaFile->alt_text);
        $this->assertEquals('Test for Media Files', $mediaFile->description);
        $this->assertEquals('jpg', $mediaFile->extension);
    }

    /**
     * Check Store a new Media File via Tenant Super Admin
     *
     * @return void
     */
    public function testStoreNewMediaFileViaTenantSuperAdmin(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(1024);
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'title' => 'Test File',
            'file' => $file
        ];

        // Request
        $response = $this->post('api/cms/v1/media-files?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'url',
                        'path',
                        'title',
                        'tenant_id',
                        'alt_text',
                        'description',
                        'extension',
                        'created_at',
                        'updated_at',
                        'tags',
                        'tenant'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Created new Media File.', $message);
        $this->assertCount(12, $data);
        $this->assertNotNull($data['path']);
        $this->assertEquals('Test File', $data['title']);
        $this->assertEquals(null, $data['tenant_id']);
        $this->assertEquals(null, $data['alt_text']);
        $this->assertEquals(null, $data['description']);
        $this->assertEquals('jpg', $data['extension']);

        $this->assertTrue(Storage::disk('mediaLibrary')->exists(basename($data['path'])));
    }

    /**
     * Check Store a new Media File via Tenant Super Admin with tags and Tenant id
     *
     * @return void
     */
    public function testStoreNewMediaFileViaTenantSuperAdminWithTagsAndTenantId(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(1024);
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'title' => 'Test File',
            'file' => $file,
            'tags' => [1, 2],
            'tenant_id' => 2
        ];

        // Request
        $response = $this->post('api/cms/v1/media-files?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'url',
                        'path',
                        'title',
                        'tenant_id',
                        'alt_text',
                        'description',
                        'extension',
                        'created_at',
                        'updated_at',
                        'tags',
                        'tenant'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Created new Media File.', $message);
        $this->assertCount(12, $data);
        $this->assertNotNull($data['path']);
        $this->assertEquals('Test File', $data['title']);
        $this->assertEquals(2, $data['tenant_id']);
        $this->assertEquals(null, $data['alt_text']);
        $this->assertEquals(null, $data['description']);
        $this->assertEquals('jpg', $data['extension']);
        $this->assertEquals(self::RESPONSE_TAGS, $data['tags']);
        $this->assertEquals(self::RESPONSE_TENANT, $data['tenant']);

        $this->assertTrue(Storage::disk('mediaLibrary')->exists(basename($data['path'])));
    }

    /**
     * Check Store a new Media File via Tenant Super Admin with wrong data
     *
     * @return void
     */
    public function testStoreNewMediaFileViaTenantSuperAdminWithWrongData(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(20480);
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'file' => $file,
            'title' => [],
            'tenant_id' => 'test',
            'alt_text' => [],
            'description' => [],
            'tags' => 'test',
        ];

        // Request
        $response = $this->post('api/cms/v1/media-files?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message = $responseJSON['message'];    // array
        $errors = $responseJSON['errors'];     // array

        $this->assertCount(6, $errors);
        $this->assertEquals('The given data was invalid.', $message);
    }

    /**
     * Check Store a new Media File via guest
     *
     * @return void
     */
    public function testStoreNewMediaFileViaGuest(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(1024);

        // Create data
        $data = [
            'title' => 'Test File',
            'file' => $file,
            'tags' => [1, 2],
            'tenant_id' => 2
        ];

        // Request
        $response = $this->post('api/cms/v1/media-files', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Update a Media File via Tenant Super Admin
     *
     * @return void
     */
    public function testUpdateMediaFileViaTenantSuperAdmin(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'title' => 'Test File',
            'tags' => [1, 2],
            'tenant_id' => 2
        ];

        // Request
        $response = $this->put('api/cms/v1/media-files/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'url',
                        'path',
                        'title',
                        'tenant_id',
                        'alt_text',
                        'description',
                        'extension',
                        'created_at',
                        'updated_at',
                        'tags',
                        'tenant'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Updated the Media File.', $message);
        $this->assertCount(12, $data);
        $this->assertNotNull($data['path']);
        $this->assertEquals('Test File', $data['title']);
        $this->assertEquals(2, $data['tenant_id']);
        $this->assertEquals(null, $data['alt_text']);
        $this->assertEquals('Test for Media Files', $data['description']);
        $this->assertEquals('jpg', $data['extension']);

        $this->assertTrue(Storage::disk('mediaLibrary')->exists(basename($data['path'])));
    }

    /**
     * Check Update a Media File via Tenant Super Admin with File
     *
     * @return void
     */
    public function testUpdateMediaFileViaTenantSuperAdminWithFile(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(1024);
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'file' => $file,
        ];

        // Request
        $response = $this->put('api/cms/v1/media-files/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'url',
                        'path',
                        'title',
                        'tenant_id',
                        'alt_text',
                        'description',
                        'extension',
                        'created_at',
                        'updated_at',
                        'tags',
                        'tenant'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Updated the Media File.', $message);
        $this->assertCount(12, $data);
        $this->assertNotNull($data['path']);
        $this->assertEquals('Second media file', $data['title']);
        $this->assertEquals(1, $data['tenant_id']);
        $this->assertEquals(null, $data['alt_text']);
        $this->assertEquals('Test for second Media Files', $data['description']);
        $this->assertEquals('jpg', $data['extension']);

        $this->assertTrue(Storage::disk('mediaLibrary')->exists(basename($data['path'])));
    }

    /**
     * Check Update a Media File via Tenant Super Admin with wrong id
     *
     * @return void
     */
    public function testUpdateMediaFileViaTenantSuperAdminWithWrongId(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'title' => 'Test File',
            'tags' => [1, 2],
            'tenant_id' => 2
        ];

        // Request
        $response = $this->put('api/cms/v1/media-files/155555?token=' . $token, $data);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Update a Media File via Tenant Super Admin with Wrong Data
     *
     * @return void
     */
    public function testUpdateMediaFileViaTenantSuperAdminWithWrongData(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(20480);
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Create data
        $data = [
            'file' => $file,
            'title' => [],
            'tenant_id' => 'test',
            'alt_text' => [],
            'description' => [],
            'tags' => 'test',
        ];

        // Request
        $response = $this->put('api/cms/v1/media-files/2?token=' . $token, $data);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'message',
                'errors'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $message = $responseJSON['message'];    // array
        $errors = $responseJSON['errors'];     // array

        $this->assertCount(5, $errors);
        $this->assertEquals('The given data was invalid.', $message);
    }

    /**
     * Check Update a new Media File via guest
     *
     * @return void
     */
    public function testUpdateNewMediaFileViaGuest(): void
    {
        $file = UploadedFile::fake()->image('file1.jpg', 600, 600)->size(1024);

        // Create data
        $data = [
            'title' => 'Test File',
            'file' => $file,
            'tags' => [1, 2],
            'tenant_id' => 2
        ];

        // Request
        $response = $this->put('api/cms/v1/media-files/2', $data);

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Index of Media Files
     *
     * @return void
     */
    public function testIndexMediaFiles()
    {
        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/cms/v1/media-files?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'url',
                            'path',
                            'title',
                            'tenant_id',
                            'alt_text',
                            'description',
                            'extension',
                            'created_at',
                            'updated_at',
                            'tags',
                            'tenant'
                        ],
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('List of Media Files.', $message);
        $this->assertCount(2, $data);
    }

    /**
     * Check Empty Index of Media Files
     *
     * @return void
     */
    public function testEmptyIndexMediaFiles()
    {
        DB::table('media_files')->delete();

        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/cms/v1/media-files?token=' . $token);

        // Check response status
        $response->assertStatus(204);
    }

    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest()
    {
        // Request
        $response = $this->get('api/cms/v1/media-files');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Show a Media File By Id via authorized user
     *
     * @return void
     */
    public function testShowById()
    {
        // Login via tenant-user
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/cms/v1/media-files/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'url',
                        'path',
                        'title',
                        'tenant_id',
                        'alt_text',
                        'description',
                        'extension',
                        'created_at',
                        'updated_at',
                        'tags',
                        'tenant'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals('Got Specific Media File.', $message);
        $this->assertCount(12, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertNotNull($data['path']);
        $this->assertNull($data['url']);
        $this->assertEquals('New media file', $data['title']);
        $this->assertEquals(null, $data['tenant_id']);
        $this->assertEquals(null, $data['alt_text']);
        $this->assertEquals('Test for Media Files', $data['description']);
        $this->assertEquals('jpg', $data['extension']);
    }

    /**
     * Check Show a Media File By Id with wrong Id
     *
     * @return void
     */
    public function testShowByIdWithWrongId()
    {

        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Request
        $response = $this->get('api/cms/v1/media-files/15555?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Show a Media File By Key for Guest
     *
     * @return void
     */
    public function testShowByKeyForGuest()
    {
        // Request
        $response = $this->get('api/cms/v1/media-files/1');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Delete Media File
     *
     * @return void
     */
    public function testDeleteMediaFile(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        $mediaFile = MediaFile::whereId(1)->first();

        // Request
        $response = $this->delete('api/cms/v1/media-files/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array
        $data         = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('Deleted The Media File.', $message);

        $removedMediaFile = MediaFile::whereId(1)->first();
        $this->assertEquals(null, $removedMediaFile);

        $this->assertFalse(Storage::disk('mediaLibrary')->exists(basename($mediaFile->path)));
    }

    /**
     * Check Delete Media File With Wrong ID
     *
     * @return void
     */
    public function testDeleteSettingWithWrongId(): void
    {
        $token = $this->loginByEmail(self::ROLE_TENANT_SUPER_ADMIN[0], self::ROLE_TENANT_SUPER_ADMIN[1]);

        // Request
        $response = $this->delete('api/cms/v1/media-files/555555?token=' . $token);

        // Check response status
        $response->assertStatus(404);

        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $code         = $responseJSON['code'];     // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals(404, $code);
        $this->assertEquals('Not found', $message);
    }

    /**
     * Check Delete Media File By Guest
     *
     * @return void
     */
    public function testDeleteMediaFileByGuest(): void
    {
        // Request
        $response = $this->delete('api/cms/v1/media-files/1');

        // Check response status
        $response->assertStatus(401);
    }
}
