<?php

namespace Tests\Functional\API\V1\CMS;

use App\Models\WidgetImageAnswer;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\Traits\TestResponseJsonTrait;

/**
 * Class WidgetImageAnswerControllerTest
 * @author  Nerush Mykola <mykola.nerush@intellicagroup.com>
 * @package Tests\Functional\API\V1
 */
class WidgetImageAnswerControllerTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const ROLE_DEVELOPER = ['developer@admin.com', 'Developer'];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsWidgetImageAnswerSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $this->assertEquals(1, DB::table('widget_media_answer_questions')->count());

        $WidgetImageAnswer = DB::table('widget_media_answer_questions')->where('id', 1)->first();
        $this->assertEquals(WidgetImageAnswer::getWidgetTypeId(), $WidgetImageAnswer->widget_type_id);
        $this->assertEquals('button_text', $WidgetImageAnswer->button_text);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetImageAnswer(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->delete('api/cms/v1/widget-image-answer/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success = $responseJSON['success'];  // array
        $code = $responseJSON['code'];     // array
        $message = $responseJSON['message'];  // array
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('Deleted The  widget Image Answer.', $message);

        $removedWidgetImageAnswer = WidgetImageAnswer::whereId(1)->first();
        $this->assertEquals(null, $removedWidgetImageAnswer);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetImageAnswerByGuest(): void
    {
        // Request
        $response = $this->delete('api/cms/v1/widget-image-answer/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Index
     *
     * @return void
     */
    public function testIndexForDeveloper(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-image-answer?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'widget_type_id',
                            'questions',
                            'button_text',
                            'settings_id',
                            'created_at',
                            'updated_at',
                            'widget_settings'
                        ]
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array
        $WidgetImageAnswer = $data[0];

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(1, $responseJSON['data']);
        $this->assertEquals('WidgetImageAnswer Index', $responseJSON['message']);
        $this->assertEquals(1, $WidgetImageAnswer['id']);
        $this->assertEquals(WidgetImageAnswer::getWidgetTypeId(), $WidgetImageAnswer['widget_type_id']);
        $this->assertEquals('button_text', $WidgetImageAnswer['button_text']);
    }


    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-image-answer');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific widget article
     *
     * @return void
     */
    public function testShowSpecificWidgetImageAnswer(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-image-answer/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'questions',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Got Specific widget Image Answer.', $responseJSON['message']);
        $this->assertCount(8, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals(WidgetImageAnswer::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('button_text', $data['button_text']);
    }


    /**
     * Check Specific Widget Article for Guest
     *
     * @return void
     */
    public function testSpecificWidgetImageAnswerForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-image-answer/2');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Widget Article
     *
     * @return void
     */
    public function testStoreNewWidgetImageAnswer(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'questions' => [
                "sets" =>
                    [
                        "order" => 1,
                        "question" => "Question Media Answer 1. Text.",
                        "answers" =>
                            [
                                [
                                    "order" => 1,
                                    "text" => "Answer for Question Media Answer 1."
                                ],
                                [
                                    "order" => 2,
                                    "text" => "Answer for Question Media Answer 1."
                                ]
                            ]
                    ]
            ],
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->post('api/cms/v1/widget-image-answer?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'questions',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings',
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Created new widget Image Answer.', $responseJSON['message']);
        $this->assertCount(8, $data);
        $this->assertEquals(WidgetImageAnswer::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('button_text', $data['button_text']);
        $this->assertEquals('{"sets": {"sets": {"order": 1, "answers": [{"text": "Answer for Question Media Answer 1.", "order": 1}, {"text": "Answer for Question Media Answer 1.", "order": 2}], "question": "Question Media Answer 1. Text."}}}', $data['questions']);
    }

    /**
     * Check Update Widget Article
     *
     * @return void
     */
    public function testUpdateWidgetImageAnswer(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'questions' => [
                "sets" =>
                    [
                        "order" => 1,
                        "question" => "Question Media Answer 1. Text.",
                        "answers" =>
                            [
                                [
                                    "order" => 1,
                                    "text" => "Answer for Question Media Answer 1."
                                ],
                                [
                                    "order" => 2,
                                    "text" => "Answer for Question Media Answer 1."
                                ]
                            ]
                    ]
            ],
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-image-answer/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'questions',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings',
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Updated the widget Image Answer.', $responseJSON['message']);
        $this->assertCount(8, $data);
        $this->assertEquals(WidgetImageAnswer::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('button_text', $data['button_text']);
        $this->assertEquals('{"sets": {"sets": {"order": 1, "answers": [{"text": "Answer for Question Media Answer 1.", "order": 1}, {"text": "Answer for Question Media Answer 1.", "order": 2}], "question": "Question Media Answer 1. Text."}}}', $data['questions']);
    }

    /**
     * Check Update WidgetImageAnswer For Guest
     *
     * @return void
     */
    public function testUpdateWidgetImageAnswerForGuest(): void
    {
        // Create data
        $data = [
            'button_text' => 'button_text',
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-image-answer/1', $data);

        // Check response status
        $response->assertStatus(401);
    }
}
