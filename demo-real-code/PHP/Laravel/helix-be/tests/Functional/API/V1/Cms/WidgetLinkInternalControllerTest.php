<?php

namespace Tests\Functional\API\V1\CMS;

use App\Models\WidgetLinkInternal;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\Traits\TestResponseJsonTrait;

/**
 * Class WidgetLinkInternalControllerTest
 * @author  Nerush Mykola <mykola.nerush@intellicagroup.com>
 * @package Tests\Functional\API\V1
 */
class WidgetLinkInternalControllerTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const ROLE_DEVELOPER = ['developer@admin.com', 'Developer'];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=TestsWidgetLinkInternalSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $this->assertEquals(1, DB::table('widget_link_internals')->count());

        $WidgetLinkInternal = DB::table('widget_link_internals')->where('id', 1)->first();
        $this->assertEquals(WidgetLinkInternal::getWidgetTypeId(), $WidgetLinkInternal->widget_type_id);
        $this->assertEquals('button_text', $WidgetLinkInternal->button_text);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetLinkInternal(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->delete('api/cms/v1/widget-link-internal/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success = $responseJSON['success'];  // array
        $code = $responseJSON['code'];     // array
        $message = $responseJSON['message'];  // array
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('Deleted The  widget Link Internal.', $message);

        $removedWidgetLinkInternal = WidgetLinkInternal::whereId(1)->first();
        $this->assertEquals(null, $removedWidgetLinkInternal);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetLinkInternalByGuest(): void
    {
        // Request
        $response = $this->delete('api/cms/v1/widget-link-internal/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Index
     *
     * @return void
     */
    public function testIndexForDeveloper(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-link-internal?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'widget_type_id',
                            'headline',
                            'headline',
                            'body',
                            'link_type',
                            'link',
                            'cta',
                            'button_text',
                            'settings_id',
                            'created_at',
                            'updated_at',
                            'widget_settings'
                        ]
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array
        $WidgetLinkInternal = $data[0];

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(1, $responseJSON['data']);
        $this->assertEquals('WidgetLinkInternal Index', $responseJSON['message']);
        $this->assertEquals(1, $WidgetLinkInternal['id']);
        $this->assertEquals(WidgetLinkInternal::getWidgetTypeId(), $WidgetLinkInternal['widget_type_id']);
        $this->assertEquals('button_text', $WidgetLinkInternal['button_text']);
        $this->assertEquals('headline', $WidgetLinkInternal['headline']);
        $this->assertEquals('link_type', $WidgetLinkInternal['link_type']);
        $this->assertEquals('cta', $WidgetLinkInternal['cta']);
        $this->assertEquals('body', $WidgetLinkInternal['body']);
    }


    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-link-internal');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific widget article
     *
     * @return void
     */
    public function testShowSpecificWidgetLinkInternal(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-link-internal/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'headline',
                        'headline',
                        'body',
                        'link_type',
                        'link',
                        'cta',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings'
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $WidgetLinkInternal = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(12, $responseJSON['data']);
        $this->assertEquals('Got Specific widget Link Internal.', $responseJSON['message']);
        $this->assertEquals(1, $WidgetLinkInternal['id']);
        $this->assertEquals(WidgetLinkInternal::getWidgetTypeId(), $WidgetLinkInternal['widget_type_id']);
        $this->assertEquals('button_text', $WidgetLinkInternal['button_text']);
        $this->assertEquals('headline', $WidgetLinkInternal['headline']);
        $this->assertEquals('link_type', $WidgetLinkInternal['link_type']);
        $this->assertEquals('cta', $WidgetLinkInternal['cta']);
        $this->assertEquals('body', $WidgetLinkInternal['body']);
    }


    /**
     * Check Specific Widget Article for Guest
     *
     * @return void
     */
    public function testSpecificWidgetLinkInternalForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-link-internal/2');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Widget Article
     *
     * @return void
     */
    public function testStoreNewWidgetLinkInternal(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'headline' => 'headline',
            'body' => 'body',
            'link_type' => 'link_type',
            'link' => 'link',
            'cta' => 'cta',
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->post('api/cms/v1/widget-link-internal?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'headline',
                        'headline',
                        'body',
                        'link_type',
                        'link',
                        'cta',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings'
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $WidgetLinkInternal = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(12, $responseJSON['data']);
        $this->assertEquals('Created new widget Link Internal.', $responseJSON['message']);
        $this->assertEquals(2, $WidgetLinkInternal['id']);
        $this->assertEquals(WidgetLinkInternal::getWidgetTypeId(), $WidgetLinkInternal['widget_type_id']);
        $this->assertEquals('button_text', $WidgetLinkInternal['button_text']);
        $this->assertEquals('headline', $WidgetLinkInternal['headline']);
        $this->assertEquals('link_type', $WidgetLinkInternal['link_type']);
        $this->assertEquals('cta', $WidgetLinkInternal['cta']);
        $this->assertEquals('body', $WidgetLinkInternal['body']);
    }

    /**
     * Check Update Widget Article
     *
     * @return void
     */
    public function testUpdateWidgetLinkInternal(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'headline' => 'headline',
            'body' => 'body',
            'link_type' => 'link_type',
            'link' => 'link',
            'cta' => 'cta',
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-link-internal/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'headline',
                        'headline',
                        'body',
                        'link_type',
                        'link',
                        'cta',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings'
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $WidgetLinkInternal = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(12, $responseJSON['data']);
        $this->assertEquals('Updated the widget Link Internal.', $responseJSON['message']);
        $this->assertEquals(1, $WidgetLinkInternal['id']);
        $this->assertEquals(WidgetLinkInternal::getWidgetTypeId(), $WidgetLinkInternal['widget_type_id']);
        $this->assertEquals('button_text', $WidgetLinkInternal['button_text']);
        $this->assertEquals('headline', $WidgetLinkInternal['headline']);
        $this->assertEquals('link_type', $WidgetLinkInternal['link_type']);
        $this->assertEquals('cta', $WidgetLinkInternal['cta']);
        $this->assertEquals('body', $WidgetLinkInternal['body']);
    }

    /**
     * Check Update WidgetLinkInternal For Guest
     *
     * @return void
     */
    public function testUpdateWidgetLinkInternalForGuest(): void
    {
        // Create data
        $data = [
            'button_text' => 'button_text',
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-link-internal/1', $data);

        // Check response status
        $response->assertStatus(401);
    }
}
