<?php

namespace Tests\Functional\API\V1\CMS;

use App\Models\WidgetMedia;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\Traits\TestResponseJsonTrait;

/**
 * Class WidgetMediaControllerTest
 *
 * PHP version 7.4
 *
 * @category Seeder
 * @package  Database\Seeders
 * @author  Nerush Mykola <mykola.nerush@intellicagroup.com>
 * @license  BSD License
 * @link     Database\Seeders
 */
class WidgetMediaControllerTest extends TestCase
{
    use DatabaseMigrations;
    use TestResponseJsonTrait;

    private const ROLE_DEVELOPER = ['developer@admin.com', 'Developer'];

    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed --class=TestsWidgetMediaSeeder');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * Check seeder.
     *
     * @return void
     */
    public function testSeeder()
    {
        $this->assertEquals(1, DB::table('widget_media')->count());

        $widgetMedia = DB::table('widget_media')->where('id', 1)->first();
        $this->assertEquals(WidgetMedia::getWidgetTypeId(), $widgetMedia->widget_type_id);
        $this->assertEquals('body', $widgetMedia->body);
        $this->assertEquals('button_text', $widgetMedia->button_text);
        $this->assertEquals('media', $widgetMedia->media);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetMedia(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->delete('api/cms/v1/widget-media/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success = $responseJSON['success'];  // array
        $code = $responseJSON['code'];     // array
        $message = $responseJSON['message'];  // array
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $success);
        $this->assertEquals(200, $code);
        $this->assertEquals(null, $data);
        $this->assertEquals('Deleted The  widget Media.', $message);

        $removedWidgetMedia = WidgetMedia::whereId(1)->first();
        $this->assertEquals(null, $removedWidgetMedia);
    }

    /**
     * Check Delete
     *
     * @return void
     */
    public function testDeleteWidgetArtiicleByGuest(): void
    {
        // Request
        $response = $this->delete('api/cms/v1/widget-media/3');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Index
     *
     * @return void
     */
    public function testIndexForDeveloper(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-media?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        [
                            'id',
                            'widget_type_id',
                            'body',
                            'media',
                            'button_text',
                            'settings_id',
                            'created_at',
                            'updated_at',
                            'widget_settings'
                        ]
                    ],
                'message'
            ]
        );

        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array
        $WidgetMedia = $data[0];

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertCount(1, $responseJSON['data']);
        $this->assertEquals('WidgetMedia Index', $responseJSON['message']);
        $this->assertEquals(1, $WidgetMedia['id']);
        $this->assertEquals(WidgetMedia::getWidgetTypeId(), $WidgetMedia['widget_type_id']);
        $this->assertEquals('body', $WidgetMedia['body']);
        $this->assertEquals('button_text', $WidgetMedia['button_text']);
        $this->assertEquals('media', $WidgetMedia['media']);
    }


    /**
     * Check Index for Guest
     *
     * @return void
     */
    public function testIndexForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-media');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Specific widget media
     *
     * @return void
     */
    public function testShowSpecificWidgetMedia(): void
    {
        // Login via super-admin
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Request
        $response = $this->get('api/cms/v1/widget-media/1?token=' . $token);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'body',
                        'media',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings'
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Got Specific widget Media.', $responseJSON['message']);
        $this->assertCount(9, $data);
        $this->assertEquals(1, $data['id']);
        $this->assertEquals(WidgetMedia::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('body', $data['body']);
        $this->assertEquals('button_text', $data['button_text']);
        $this->assertEquals('media', $data['media']);
    }


    /**
     * Check Specific Widget Media for Guest
     *
     * @return void
     */
    public function testSpecificWidgetMediaForGuest(): void
    {
        // Request
        $response = $this->get('api/cms/v1/widget-media/2');

        // Check response status
        $response->assertStatus(401);
    }

    /**
     * Check Store a new Widget Media
     *
     * @return void
     */
    public function testStoreNewWidgetMedia(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'body' => 'body',
            'media' => 'media',
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->post('api/cms/v1/widget-media?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'body',
                        'media',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings',
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Created new widget Media.', $responseJSON['message']);
        $this->assertCount(9, $data);
        $this->assertEquals(WidgetMedia::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('body', $data['body']);
        $this->assertEquals('button_text', $data['button_text']);
    }

    /**
     * Check Update Widget Media
     *
     * @return void
     */
    public function testUpdateWidgetMedia(): void
    {
        $token = $this->loginByEmail(self::ROLE_DEVELOPER[0], self::ROLE_DEVELOPER[1]);

        // Create data
        $data = [
            'body' => 'body',
            'media' => 'media',
            'button_text' => 'button_text',
            'settings' => [
                'completion_time' => '13',
            ]
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-media/1?token=' . $token, $data);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'code',
                'data' =>
                    [
                        'id',
                        'widget_type_id',
                        'body',
                        'media',
                        'button_text',
                        'settings_id',
                        'created_at',
                        'updated_at',
                        'widget_settings',
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data = $responseJSON['data'];     // array

        $this->assertEquals(true, $responseJSON['success']);
        $this->assertEquals(200, $responseJSON['code']);
        $this->assertEquals('Updated the widget Media.', $responseJSON['message']);
        $this->assertCount(9, $data);
        $this->assertEquals(WidgetMedia::getWidgetTypeId(), $data['widget_type_id']);
        $this->assertEquals('body', $data['body']);
        $this->assertEquals('button_text', $data['button_text']);
    }

    /**
     * Check Update WidgetMedia For Guest
     *
     * @return void
     */
    public function testUpdateWidgetMediaForGuest(): void
    {
        // Create data
        $data = [
            'body' => 'body',
            'media' => 'media',
            'button_text' => 'button_text',
        ];

        // Request
        $response = $this->put('api/cms/v1/widget-media/1', $data);

        // Check response status
        $response->assertStatus(401);
    }
}
